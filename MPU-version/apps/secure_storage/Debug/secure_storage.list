
secure_storage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004af0  08004af0  00005af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b38  08004b38  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b38  08004b38  00005b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b40  08004b40  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b40  08004b40  00005b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b44  08004b44  00005b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004b48  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  2000000c  08004b54  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  08004b54  0000678c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a1a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f81  00000000  00000000  0001da56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  000209d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001117  00000000  00000000  00021fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027648  00000000  00000000  000230f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194c4  00000000  00000000  0004a73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0272  00000000  00000000  00063c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153e75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e8c  00000000  00000000  00153eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00159d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ad8 	.word	0x08004ad8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004ad8 	.word	0x08004ad8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 ff0b 	bl	80012d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f816 	bl	80004f0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004c4:	f000 f874 	bl	80005b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 fa1c 	bl	8000904 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004cc:	f000 f89e 	bl	800060c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d0:	f000 f8d4 	bl	800067c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004d4:	f000 f910 	bl	80006f8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004d8:	f000 f948 	bl	800076c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004dc:	f000 f984 	bl	80007e8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004e0:	f000 f9b2 	bl	8000848 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e4:	f000 f9e0 	bl	80008a8 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 80004e8:	f000 f92c 	bl	8000744 <MX_RNG_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <main+0x34>

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b096      	sub	sp, #88	@ 0x58
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	2244      	movs	r2, #68	@ 0x44
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 fabd 	bl	8004a7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	463b      	mov	r3, r7
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000512:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000516:	f001 fdfd 	bl	8002114 <HAL_PWREx_ControlVoltageScaling>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000520:	f000 fba2 	bl	8000c68 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000524:	f001 fdd8 	bl	80020d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000528:	4b20      	ldr	r3, [pc, #128]	@ (80005ac <SystemClock_Config+0xbc>)
 800052a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800052e:	4a1f      	ldr	r2, [pc, #124]	@ (80005ac <SystemClock_Config+0xbc>)
 8000530:	f023 0318 	bic.w	r3, r3, #24
 8000534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000538:	2310      	movs	r3, #16
 800053a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800053c:	2301      	movs	r3, #1
 800053e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000540:	2360      	movs	r3, #96	@ 0x60
 8000542:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000544:	2300      	movs	r3, #0
 8000546:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000548:	2302      	movs	r3, #2
 800054a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800054c:	2301      	movs	r3, #1
 800054e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000550:	2301      	movs	r3, #1
 8000552:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000554:	2328      	movs	r3, #40	@ 0x28
 8000556:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000558:	2302      	movs	r3, #2
 800055a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 7;
 800055c:	2307      	movs	r3, #7
 800055e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000560:	2304      	movs	r3, #4
 8000562:	653b      	str	r3, [r7, #80]	@ 0x50
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fef5 	bl	8002358 <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x88>
  {
    /* Initialization Error */
    Error_Handler();
 8000574:	f000 fb78 	bl	8000c68 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000578:	230f      	movs	r3, #15
 800057a:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	2303      	movs	r3, #3
 800057e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800058c:	463b      	mov	r3, r7
 800058e:	2104      	movs	r1, #4
 8000590:	4618      	mov	r0, r3
 8000592:	f002 fabd 	bl	8002b10 <HAL_RCC_ClockConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0xb0>
  {
    /* Initialization Error */
    Error_Handler();
 800059c:	f000 fb64 	bl	8000c68 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005a0:	f002 ffc4 	bl	800352c <HAL_RCCEx_EnableMSIPLLMode>
}
 80005a4:	bf00      	nop
 80005a6:	3758      	adds	r7, #88	@ 0x58
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000

080005b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b0a2      	sub	sp, #136	@ 0x88
 80005b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2288      	movs	r2, #136	@ 0x88
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 fa5e 	bl	8004a7e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG;
 80005c2:	f44f 2384 	mov.w	r3, #270336	@ 0x42000
 80005c6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005c8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80005cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80005ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80005d2:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005d4:	2301      	movs	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80005dc:	2318      	movs	r3, #24
 80005de:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80005ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80005f0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fcaf 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000600:	f000 fb32 	bl	8000c68 <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3788      	adds	r7, #136	@ 0x88
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000610:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 8000612:	4a19      	ldr	r2, [pc, #100]	@ (8000678 <MX_DFSDM1_Init+0x6c>)
 8000614:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 8000618:	2201      	movs	r2, #1
 800061a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 8000624:	2202      	movs	r2, #2
 8000626:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 8000636:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800063a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800063c:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000642:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 8000644:	2204      	movs	r2, #4
 8000646:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 800064a:	2200      	movs	r2, #0
 800064c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800064e:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 8000650:	2201      	movs	r2, #1
 8000652:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000654:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 8000656:	2200      	movs	r2, #0
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 800065c:	2200      	movs	r2, #0
 800065e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000660:	4804      	ldr	r0, [pc, #16]	@ (8000674 <MX_DFSDM1_Init+0x68>)
 8000662:	f000 ffe3 	bl	800162c <HAL_DFSDM_ChannelInit>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800066c:	f000 fafc 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000028 	.word	0x20000028
 8000678:	40016020 	.word	0x40016020

0800067c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000680:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <MX_I2C2_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <MX_I2C2_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_I2C2_Init+0x74>)
 8000688:	f640 6214 	movw	r2, #3604	@ 0xe14
 800068c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800068e:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_I2C2_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <MX_I2C2_Init+0x74>)
 8000696:	2201      	movs	r2, #1
 8000698:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069a:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <MX_I2C2_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a6:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ac:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006b8:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006ba:	f001 faa8 	bl	8001c0e <HAL_I2C_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006c4:	f000 fad0 	bl	8000c68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4809      	ldr	r0, [pc, #36]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006cc:	f001 fb3a 	bl	8001d44 <HAL_I2CEx_ConfigAnalogFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006d6:	f000 fac7 	bl	8000c68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006da:	2100      	movs	r1, #0
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006de:	f001 fb7c 	bl	8001dda <HAL_I2CEx_ConfigDigitalFilter>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006e8:	f000 fabe 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000060 	.word	0x20000060
 80006f4:	40005800 	.word	0x40005800

080006f8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_QUADSPI_Init+0x44>)
 80006fe:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <MX_QUADSPI_Init+0x48>)
 8000700:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_QUADSPI_Init+0x44>)
 8000704:	2202      	movs	r2, #2
 8000706:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_QUADSPI_Init+0x44>)
 800070a:	2204      	movs	r2, #4
 800070c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_QUADSPI_Init+0x44>)
 8000710:	2210      	movs	r2, #16
 8000712:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_QUADSPI_Init+0x44>)
 8000716:	2217      	movs	r2, #23
 8000718:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <MX_QUADSPI_Init+0x44>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_QUADSPI_Init+0x44>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_QUADSPI_Init+0x44>)
 8000728:	f001 fd5a 	bl	80021e0 <HAL_QSPI_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000732:	f000 fa99 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000b4 	.word	0x200000b4
 8000740:	a0001000 	.word	0xa0001000

08000744 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_RNG_Init+0x20>)
 800074a:	4a07      	ldr	r2, [pc, #28]	@ (8000768 <MX_RNG_Init+0x24>)
 800074c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_RNG_Init+0x20>)
 8000750:	f003 f8ce 	bl	80038f0 <HAL_RNG_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800075a:	f000 fa85 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000f8 	.word	0x200000f8
 8000768:	50060800 	.word	0x50060800

0800076c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <MX_SPI3_Init+0x74>)
 8000772:	4a1c      	ldr	r2, [pc, #112]	@ (80007e4 <MX_SPI3_Init+0x78>)
 8000774:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_SPI3_Init+0x74>)
 8000778:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800077c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_SPI3_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_SPI3_Init+0x74>)
 8000786:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800078a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_SPI3_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000792:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <MX_SPI3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_SPI3_Init+0x74>)
 800079a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800079e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_SPI3_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_SPI3_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_SPI3_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_SPI3_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_SPI3_Init+0x74>)
 80007ba:	2207      	movs	r2, #7
 80007bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_SPI3_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_SPI3_Init+0x74>)
 80007c6:	2208      	movs	r2, #8
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_SPI3_Init+0x74>)
 80007cc:	f003 f8e7 	bl	800399e <HAL_SPI_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 fa47 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000108 	.word	0x20000108
 80007e4:	40003c00 	.word	0x40003c00

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	@ (8000844 <MX_USART1_UART_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f2:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 800082c:	f003 f95a 	bl	8003ae4 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 fa17 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000016c 	.word	0x2000016c
 8000844:	40013800 	.word	0x40013800

08000848 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 800084e:	4a15      	ldr	r2, [pc, #84]	@ (80008a4 <MX_USART3_UART_Init+0x5c>)
 8000850:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_USART3_UART_Init+0x58>)
 800088c:	f003 f92a 	bl	8003ae4 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 f9e7 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200001f4 	.word	0x200001f4
 80008a4:	40004800 	.word	0x40004800

080008a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2206      	movs	r2, #6
 80008b8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2202      	movs	r2, #2
 80008be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	f001 fac1 	bl	8001e72 <HAL_PCD_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f9b7 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000027c 	.word	0x2000027c

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091a:	4bbd      	ldr	r3, [pc, #756]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	4abc      	ldr	r2, [pc, #752]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 8000920:	f043 0310 	orr.w	r3, r3, #16
 8000924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000926:	4bba      	ldr	r3, [pc, #744]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4bb7      	ldr	r3, [pc, #732]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	4ab6      	ldr	r2, [pc, #728]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093e:	4bb4      	ldr	r3, [pc, #720]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4bb1      	ldr	r3, [pc, #708]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	4ab0      	ldr	r2, [pc, #704]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000956:	4bae      	ldr	r3, [pc, #696]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4bab      	ldr	r3, [pc, #684]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	4aaa      	ldr	r2, [pc, #680]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096e:	4ba8      	ldr	r3, [pc, #672]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	4ba5      	ldr	r3, [pc, #660]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4aa4      	ldr	r2, [pc, #656]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000986:	4ba2      	ldr	r3, [pc, #648]	@ (8000c10 <MX_GPIO_Init+0x30c>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000998:	489e      	ldr	r0, [pc, #632]	@ (8000c14 <MX_GPIO_Init+0x310>)
 800099a:	f001 f8fd 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f248 1104 	movw	r1, #33028	@ 0x8104
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a8:	f001 f8f6 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80009ac:	2200      	movs	r2, #0
 80009ae:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80009b2:	4899      	ldr	r0, [pc, #612]	@ (8000c18 <MX_GPIO_Init+0x314>)
 80009b4:	f001 f8f0 	bl	8001b98 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f241 0181 	movw	r1, #4225	@ 0x1081
 80009be:	4897      	ldr	r0, [pc, #604]	@ (8000c1c <MX_GPIO_Init+0x318>)
 80009c0:	f001 f8ea 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ca:	4894      	ldr	r0, [pc, #592]	@ (8000c1c <MX_GPIO_Init+0x318>)
 80009cc:	f001 f8e4 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80009d6:	4892      	ldr	r0, [pc, #584]	@ (8000c20 <MX_GPIO_Init+0x31c>)
 80009d8:	f001 f8de 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2120      	movs	r1, #32
 80009e0:	488d      	ldr	r0, [pc, #564]	@ (8000c18 <MX_GPIO_Init+0x314>)
 80009e2:	f001 f8d9 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	2101      	movs	r1, #1
 80009ea:	488a      	ldr	r0, [pc, #552]	@ (8000c14 <MX_GPIO_Init+0x310>)
 80009ec:	f001 f8d4 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009f0:	f240 1315 	movw	r3, #277	@ 0x115
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4882      	ldr	r0, [pc, #520]	@ (8000c14 <MX_GPIO_Init+0x310>)
 8000a0a:	f000 ff1b 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a0e:	236a      	movs	r3, #106	@ 0x6a
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	487c      	ldr	r0, [pc, #496]	@ (8000c14 <MX_GPIO_Init+0x310>)
 8000a24:	f000 ff0e 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a2e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4878      	ldr	r0, [pc, #480]	@ (8000c20 <MX_GPIO_Init+0x31c>)
 8000a40:	f000 ff00 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a44:	233f      	movs	r3, #63	@ 0x3f
 8000a46:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a48:	230b      	movs	r3, #11
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4872      	ldr	r0, [pc, #456]	@ (8000c20 <MX_GPIO_Init+0x31c>)
 8000a58:	f000 fef4 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7a:	f000 fee3 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a7e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9a:	f000 fed3 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abc:	f000 fec2 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ac4:	230b      	movs	r3, #11
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad6:	f000 feb5 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ada:	23e0      	movs	r3, #224	@ 0xe0
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aea:	2305      	movs	r3, #5
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af8:	f000 fea4 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000afc:	2301      	movs	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4841      	ldr	r0, [pc, #260]	@ (8000c18 <MX_GPIO_Init+0x314>)
 8000b12:	f000 fe97 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b16:	2302      	movs	r3, #2
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b1a:	230b      	movs	r3, #11
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	483b      	ldr	r0, [pc, #236]	@ (8000c18 <MX_GPIO_Init+0x314>)
 8000b2a:	f000 fe8b 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b2e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000b32:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4834      	ldr	r0, [pc, #208]	@ (8000c18 <MX_GPIO_Init+0x314>)
 8000b48:	f000 fe7c 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b4c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000b50:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b52:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	482e      	ldr	r0, [pc, #184]	@ (8000c1c <MX_GPIO_Init+0x318>)
 8000b64:	f000 fe6e 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b68:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4826      	ldr	r0, [pc, #152]	@ (8000c1c <MX_GPIO_Init+0x318>)
 8000b82:	f000 fe5f 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b86:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4820      	ldr	r0, [pc, #128]	@ (8000c20 <MX_GPIO_Init+0x31c>)
 8000ba0:	f000 fe50 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ba4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000baa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4819      	ldr	r0, [pc, #100]	@ (8000c20 <MX_GPIO_Init+0x31c>)
 8000bbc:	f000 fe42 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4810      	ldr	r0, [pc, #64]	@ (8000c1c <MX_GPIO_Init+0x318>)
 8000bdc:	f000 fe32 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000be0:	2378      	movs	r3, #120	@ 0x78
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <MX_GPIO_Init+0x318>)
 8000bfc:	f000 fe22 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c06:	2312      	movs	r3, #18
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e00a      	b.n	8000c24 <MX_GPIO_Init+0x320>
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48001000 	.word	0x48001000
 8000c18:	48000400 	.word	0x48000400
 8000c1c:	48000c00 	.word	0x48000c00
 8000c20:	48000800 	.word	0x48000800
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	480b      	ldr	r0, [pc, #44]	@ (8000c64 <MX_GPIO_Init+0x360>)
 8000c36:	f000 fe05 	bl	8001844 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2017      	movs	r0, #23
 8000c40:	f000 fcbd 	bl	80015be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c44:	2017      	movs	r0, #23
 8000c46:	f000 fcd6 	bl	80015f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2028      	movs	r0, #40	@ 0x28
 8000c50:	f000 fcb5 	bl	80015be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c54:	2028      	movs	r0, #40	@ 0x28
 8000c56:	f000 fcce 	bl	80015f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	@ 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	48000400 	.word	0x48000400

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <Error_Handler+0x8>

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c96:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0ac      	sub	sp, #176	@ 0xb0
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2288      	movs	r2, #136	@ 0x88
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 fece 	bl	8004a7e <memset>
  if(DFSDM1_Init == 0)
 8000ce2:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d142      	bne.n	8000d70 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000cea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 f92c 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d06:	f7ff ffaf 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d22:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	4a15      	ldr	r2, [pc, #84]	@ (8000d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2e:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000d3a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000d3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d54:	2306      	movs	r3, #6
 8000d56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d5a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4807      	ldr	r0, [pc, #28]	@ (8000d80 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000d62:	f000 fd6f 	bl	8001844 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000d66:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	4a02      	ldr	r2, [pc, #8]	@ (8000d78 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d6e:	6013      	str	r3, [r2, #0]
  }

}
 8000d70:	bf00      	nop
 8000d72:	37b0      	adds	r7, #176	@ 0xb0
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000760 	.word	0x20000760
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48001000 	.word	0x48001000

08000d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0ac      	sub	sp, #176	@ 0xb0
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2288      	movs	r2, #136	@ 0x88
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f003 fe6a 	bl	8004a7e <memset>
  if(hi2c->Instance==I2C2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a21      	ldr	r2, [pc, #132]	@ (8000e34 <HAL_I2C_MspInit+0xb0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d13b      	bne.n	8000e2c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 f8c9 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dcc:	f7ff ff4c 	bl	8000c68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <HAL_I2C_MspInit+0xb4>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd4:	4a18      	ldr	r2, [pc, #96]	@ (8000e38 <HAL_I2C_MspInit+0xb4>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ddc:	4b16      	ldr	r3, [pc, #88]	@ (8000e38 <HAL_I2C_MspInit+0xb4>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000de8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df0:	2312      	movs	r3, #18
 8000df2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e02:	2304      	movs	r3, #4
 8000e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480b      	ldr	r0, [pc, #44]	@ (8000e3c <HAL_I2C_MspInit+0xb8>)
 8000e10:	f000 fd18 	bl	8001844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <HAL_I2C_MspInit+0xb4>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e18:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <HAL_I2C_MspInit+0xb4>)
 8000e1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HAL_I2C_MspInit+0xb4>)
 8000e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000e2c:	bf00      	nop
 8000e2e:	37b0      	adds	r7, #176	@ 0xb0
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40005800 	.word	0x40005800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400

08000e40 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	@ 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a17      	ldr	r2, [pc, #92]	@ (8000ebc <HAL_QSPI_MspInit+0x7c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d128      	bne.n	8000eb4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e62:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <HAL_QSPI_MspInit+0x80>)
 8000e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e66:	4a16      	ldr	r2, [pc, #88]	@ (8000ec0 <HAL_QSPI_MspInit+0x80>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <HAL_QSPI_MspInit+0x80>)
 8000e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <HAL_QSPI_MspInit+0x80>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ec0 <HAL_QSPI_MspInit+0x80>)
 8000e80:	f043 0310 	orr.w	r3, r3, #16
 8000e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_QSPI_MspInit+0x80>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e92:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000e96:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ea4:	230a      	movs	r3, #10
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <HAL_QSPI_MspInit+0x84>)
 8000eb0:	f000 fcc8 	bl	8001844 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	@ 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	a0001000 	.word	0xa0001000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48001000 	.word	0x48001000

08000ec8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <HAL_RNG_MspInit+0x38>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10b      	bne.n	8000ef2 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <HAL_RNG_MspInit+0x3c>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	4a09      	ldr	r2, [pc, #36]	@ (8000f04 <HAL_RNG_MspInit+0x3c>)
 8000ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <HAL_RNG_MspInit+0x3c>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	50060800 	.word	0x50060800
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	@ 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a17      	ldr	r2, [pc, #92]	@ (8000f84 <HAL_SPI_MspInit+0x7c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d128      	bne.n	8000f7c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <HAL_SPI_MspInit+0x80>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2e:	4a16      	ldr	r2, [pc, #88]	@ (8000f88 <HAL_SPI_MspInit+0x80>)
 8000f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <HAL_SPI_MspInit+0x80>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_SPI_MspInit+0x80>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	4a10      	ldr	r2, [pc, #64]	@ (8000f88 <HAL_SPI_MspInit+0x80>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_SPI_MspInit+0x80>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f5a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f6c:	2306      	movs	r3, #6
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <HAL_SPI_MspInit+0x84>)
 8000f78:	f000 fc64 	bl	8001844 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	@ 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40003c00 	.word	0x40003c00
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48000800 	.word	0x48000800

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0ae      	sub	sp, #184	@ 0xb8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	2288      	movs	r2, #136	@ 0x88
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fd64 	bl	8004a7e <memset>
  if(huart->Instance==USART1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a42      	ldr	r2, [pc, #264]	@ (80010c4 <HAL_UART_MspInit+0x134>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d13b      	bne.n	8001038 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 ffc3 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fd8:	f7ff fe46 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80010c8 <HAL_UART_MspInit+0x138>)
 8000fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe0:	4a39      	ldr	r2, [pc, #228]	@ (80010c8 <HAL_UART_MspInit+0x138>)
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fe8:	4b37      	ldr	r3, [pc, #220]	@ (80010c8 <HAL_UART_MspInit+0x138>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b34      	ldr	r3, [pc, #208]	@ (80010c8 <HAL_UART_MspInit+0x138>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff8:	4a33      	ldr	r2, [pc, #204]	@ (80010c8 <HAL_UART_MspInit+0x138>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001000:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <HAL_UART_MspInit+0x138>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800100c:	23c0      	movs	r3, #192	@ 0xc0
 800100e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001024:	2307      	movs	r3, #7
 8001026:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800102e:	4619      	mov	r1, r3
 8001030:	4826      	ldr	r0, [pc, #152]	@ (80010cc <HAL_UART_MspInit+0x13c>)
 8001032:	f000 fc07 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001036:	e040      	b.n	80010ba <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a24      	ldr	r2, [pc, #144]	@ (80010d0 <HAL_UART_MspInit+0x140>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d13b      	bne.n	80010ba <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001042:	2304      	movs	r3, #4
 8001044:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001046:	2300      	movs	r3, #0
 8001048:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4618      	mov	r0, r3
 8001050:	f001 ff82 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800105a:	f7ff fe05 	bl	8000c68 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800105e:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <HAL_UART_MspInit+0x138>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001062:	4a19      	ldr	r2, [pc, #100]	@ (80010c8 <HAL_UART_MspInit+0x138>)
 8001064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001068:	6593      	str	r3, [r2, #88]	@ 0x58
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <HAL_UART_MspInit+0x138>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <HAL_UART_MspInit+0x138>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a13      	ldr	r2, [pc, #76]	@ (80010c8 <HAL_UART_MspInit+0x138>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_UART_MspInit+0x138>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800108e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001092:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010a8:	2307      	movs	r3, #7
 80010aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010b2:	4619      	mov	r1, r3
 80010b4:	4807      	ldr	r0, [pc, #28]	@ (80010d4 <HAL_UART_MspInit+0x144>)
 80010b6:	f000 fbc5 	bl	8001844 <HAL_GPIO_Init>
}
 80010ba:	bf00      	nop
 80010bc:	37b8      	adds	r7, #184	@ 0xb8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40013800 	.word	0x40013800
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000400 	.word	0x48000400
 80010d0:	40004800 	.word	0x40004800
 80010d4:	48000c00 	.word	0x48000c00

080010d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010f8:	d154      	bne.n	80011a4 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b2c      	ldr	r3, [pc, #176]	@ (80011ac <HAL_PCD_MspInit+0xd4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a2b      	ldr	r2, [pc, #172]	@ (80011ac <HAL_PCD_MspInit+0xd4>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b29      	ldr	r3, [pc, #164]	@ (80011ac <HAL_PCD_MspInit+0xd4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001112:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112a:	f000 fb8b 	bl	8001844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800112e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001140:	230a      	movs	r3, #10
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114e:	f000 fb79 	bl	8001844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <HAL_PCD_MspInit+0xd4>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <HAL_PCD_MspInit+0xd4>)
 8001158:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800115c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115e:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <HAL_PCD_MspInit+0xd4>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <HAL_PCD_MspInit+0xd4>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d114      	bne.n	80011a0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <HAL_PCD_MspInit+0xd4>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117a:	4a0c      	ldr	r2, [pc, #48]	@ (80011ac <HAL_PCD_MspInit+0xd4>)
 800117c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001180:	6593      	str	r3, [r2, #88]	@ 0x58
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <HAL_PCD_MspInit+0xd4>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800118e:	f001 f817 	bl	80021c0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_PCD_MspInit+0xd4>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001196:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <HAL_PCD_MspInit+0xd4>)
 8001198:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800119c:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800119e:	e001      	b.n	80011a4 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80011a0:	f001 f80e 	bl	80021c0 <HAL_PWREx_EnableVddUSB>
}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	@ 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <NMI_Handler+0x4>

080011b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <MemManage_Handler+0x4>

080011c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001206:	f000 f8bb 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}

0800120e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001212:	2020      	movs	r0, #32
 8001214:	f000 fcd8 	bl	8001bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001218:	2040      	movs	r0, #64	@ 0x40
 800121a:	f000 fcd5 	bl	8001bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800121e:	2080      	movs	r0, #128	@ 0x80
 8001220:	f000 fcd2 	bl	8001bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001224:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001228:	f000 fcce 	bl	8001bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001234:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001238:	f000 fcc6 	bl	8001bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800123c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001240:	f000 fcc2 	bl	8001bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001244:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001248:	f000 fcbe 	bl	8001bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800124c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001250:	f000 fcba 	bl	8001bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001254:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001258:	f000 fcb6 	bl	8001bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <SystemInit+0x20>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126a:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <SystemInit+0x20>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001288:	f7ff ffea 	bl	8001260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	@ (80012c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	@ (80012c8 <LoopForever+0xe>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	@ (80012d0 <LoopForever+0x16>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f003 fbed 	bl	8004a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012b6:	f7ff f8ff 	bl	80004b8 <main>

080012ba <LoopForever>:

LoopForever:
    b LoopForever
 80012ba:	e7fe      	b.n	80012ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012c8:	08004b48 	.word	0x08004b48
  ldr r2, =_sbss
 80012cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012d0:	2000078c 	.word	0x2000078c

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>

080012d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f000 f961 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e6:	2000      	movs	r0, #0
 80012e8:	f000 f80e 	bl	8001308 <HAL_InitTick>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	71fb      	strb	r3, [r7, #7]
 80012f6:	e001      	b.n	80012fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012f8:	f7ff fcbc 	bl	8000c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <HAL_InitTick+0x6c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d023      	beq.n	8001364 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800131c:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <HAL_InitTick+0x70>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <HAL_InitTick+0x6c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f96d 	bl	8001612 <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10f      	bne.n	800135e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d809      	bhi.n	8001358 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800134c:	f000 f937 	bl	80015be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001350:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <HAL_InitTick+0x74>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e007      	b.n	8001368 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	e004      	b.n	8001368 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	e001      	b.n	8001368 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001368:	7bfb      	ldrb	r3, [r7, #15]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008
 8001378:	20000000 	.word	0x20000000
 800137c:	20000004 	.word	0x20000004

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000764 	.word	0x20000764

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	@ (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000764 	.word	0x20000764

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ffee 	bl	80013a8 <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_Delay+0x44>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffde 	bl	80013a8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	@ (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4907      	ldr	r1, [pc, #28]	@ (80014a4 <__NVIC_EnableIRQ+0x38>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	@ (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	@ (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	@ 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	@ 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff29 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff3e 	bl	8001450 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff31 	bl	800146c <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffa2 	bl	8001564 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e0ac      	b.n	8001798 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f8b2 	bl	80017ac <DFSDM_GetChannelFromInstance>
 8001648:	4603      	mov	r3, r0
 800164a:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <HAL_DFSDM_ChannelInit+0x174>)
 800164c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e09f      	b.n	8001798 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fb2f 	bl	8000cbc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800165e:	4b51      	ldr	r3, [pc, #324]	@ (80017a4 <HAL_DFSDM_ChannelInit+0x178>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	4a4f      	ldr	r2, [pc, #316]	@ (80017a4 <HAL_DFSDM_ChannelInit+0x178>)
 8001666:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001668:	4b4e      	ldr	r3, [pc, #312]	@ (80017a4 <HAL_DFSDM_ChannelInit+0x178>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d125      	bne.n	80016bc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001670:	4b4d      	ldr	r3, [pc, #308]	@ (80017a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a4c      	ldr	r2, [pc, #304]	@ (80017a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001676:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800167a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800167c:	4b4a      	ldr	r3, [pc, #296]	@ (80017a8 <HAL_DFSDM_ChannelInit+0x17c>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4948      	ldr	r1, [pc, #288]	@ (80017a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800168a:	4b47      	ldr	r3, [pc, #284]	@ (80017a8 <HAL_DFSDM_ChannelInit+0x17c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a46      	ldr	r2, [pc, #280]	@ (80017a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001690:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001694:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	791b      	ldrb	r3, [r3, #4]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d108      	bne.n	80016b0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800169e:	4b42      	ldr	r3, [pc, #264]	@ (80017a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	041b      	lsls	r3, r3, #16
 80016aa:	493f      	ldr	r1, [pc, #252]	@ (80017a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80016b0:	4b3d      	ldr	r3, [pc, #244]	@ (80017a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a3c      	ldr	r2, [pc, #240]	@ (80017a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80016b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80016ba:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80016ca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6819      	ldr	r1, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016da:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80016e0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 020f 	bic.w	r2, r2, #15
 80016f8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001720:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6899      	ldr	r1, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001730:	3b01      	subs	r3, #1
 8001732:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f002 0207 	and.w	r2, r2, #7
 800174c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6859      	ldr	r1, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001758:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001778:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f810 	bl	80017ac <DFSDM_GetChannelFromInstance>
 800178c:	4602      	mov	r2, r0
 800178e:	4904      	ldr	r1, [pc, #16]	@ (80017a0 <HAL_DFSDM_ChannelInit+0x174>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000076c 	.word	0x2000076c
 80017a4:	20000768 	.word	0x20000768
 80017a8:	40016000 	.word	0x40016000

080017ac <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001828 <DFSDM_GetChannelFromInstance+0x7c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d102      	bne.n	80017c2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	e02b      	b.n	800181a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a19      	ldr	r2, [pc, #100]	@ (800182c <DFSDM_GetChannelFromInstance+0x80>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d102      	bne.n	80017d0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80017ca:	2301      	movs	r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	e024      	b.n	800181a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a17      	ldr	r2, [pc, #92]	@ (8001830 <DFSDM_GetChannelFromInstance+0x84>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d102      	bne.n	80017de <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80017d8:	2302      	movs	r3, #2
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e01d      	b.n	800181a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a14      	ldr	r2, [pc, #80]	@ (8001834 <DFSDM_GetChannelFromInstance+0x88>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d102      	bne.n	80017ec <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80017e6:	2304      	movs	r3, #4
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e016      	b.n	800181a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a12      	ldr	r2, [pc, #72]	@ (8001838 <DFSDM_GetChannelFromInstance+0x8c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d102      	bne.n	80017fa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80017f4:	2305      	movs	r3, #5
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e00f      	b.n	800181a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a0f      	ldr	r2, [pc, #60]	@ (800183c <DFSDM_GetChannelFromInstance+0x90>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d102      	bne.n	8001808 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001802:	2306      	movs	r3, #6
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e008      	b.n	800181a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a0d      	ldr	r2, [pc, #52]	@ (8001840 <DFSDM_GetChannelFromInstance+0x94>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d102      	bne.n	8001816 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001810:	2307      	movs	r3, #7
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e001      	b.n	800181a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001816:	2303      	movs	r3, #3
 8001818:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40016000 	.word	0x40016000
 800182c:	40016020 	.word	0x40016020
 8001830:	40016040 	.word	0x40016040
 8001834:	40016080 	.word	0x40016080
 8001838:	400160a0 	.word	0x400160a0
 800183c:	400160c0 	.word	0x400160c0
 8001840:	400160e0 	.word	0x400160e0

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001852:	e17f      	b.n	8001b54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8171 	beq.w	8001b4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d005      	beq.n	8001884 <HAL_GPIO_Init+0x40>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d130      	bne.n	80018e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ba:	2201      	movs	r2, #1
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	f003 0201 	and.w	r2, r3, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d118      	bne.n	8001924 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018f8:	2201      	movs	r2, #1
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	08db      	lsrs	r3, r3, #3
 800190e:	f003 0201 	and.w	r2, r3, #1
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b03      	cmp	r3, #3
 800192e:	d017      	beq.n	8001960 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d123      	bne.n	80019b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	08da      	lsrs	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3208      	adds	r2, #8
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	220f      	movs	r2, #15
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	08da      	lsrs	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3208      	adds	r2, #8
 80019ae:	6939      	ldr	r1, [r7, #16]
 80019b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80ac 	beq.w	8001b4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b74 <HAL_GPIO_Init+0x330>)
 80019f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001b74 <HAL_GPIO_Init+0x330>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a02:	4b5c      	ldr	r3, [pc, #368]	@ (8001b74 <HAL_GPIO_Init+0x330>)
 8001a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001b78 <HAL_GPIO_Init+0x334>)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x242>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8001b7c <HAL_GPIO_Init+0x338>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x23e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4e      	ldr	r2, [pc, #312]	@ (8001b80 <HAL_GPIO_Init+0x33c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x23a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001b84 <HAL_GPIO_Init+0x340>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x236>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4c      	ldr	r2, [pc, #304]	@ (8001b88 <HAL_GPIO_Init+0x344>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x232>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8001b8c <HAL_GPIO_Init+0x348>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x22e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4a      	ldr	r2, [pc, #296]	@ (8001b90 <HAL_GPIO_Init+0x34c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x22a>
 8001a6a:	2306      	movs	r3, #6
 8001a6c:	e00c      	b.n	8001a88 <HAL_GPIO_Init+0x244>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e00a      	b.n	8001a88 <HAL_GPIO_Init+0x244>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x244>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x244>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x244>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x244>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x244>
 8001a86:	2300      	movs	r3, #0
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a98:	4937      	ldr	r1, [pc, #220]	@ (8001b78 <HAL_GPIO_Init+0x334>)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8001b94 <HAL_GPIO_Init+0x350>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aca:	4a32      	ldr	r2, [pc, #200]	@ (8001b94 <HAL_GPIO_Init+0x350>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ad0:	4b30      	ldr	r3, [pc, #192]	@ (8001b94 <HAL_GPIO_Init+0x350>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001af4:	4a27      	ldr	r2, [pc, #156]	@ (8001b94 <HAL_GPIO_Init+0x350>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001afa:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <HAL_GPIO_Init+0x350>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8001b94 <HAL_GPIO_Init+0x350>)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	@ (8001b94 <HAL_GPIO_Init+0x350>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b48:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <HAL_GPIO_Init+0x350>)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f47f ae78 	bne.w	8001854 <HAL_GPIO_Init+0x10>
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	371c      	adds	r7, #28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	48000400 	.word	0x48000400
 8001b80:	48000800 	.word	0x48000800
 8001b84:	48000c00 	.word	0x48000c00
 8001b88:	48001000 	.word	0x48001000
 8001b8c:	48001400 	.word	0x48001400
 8001b90:	48001800 	.word	0x48001800
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bd2:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bde:	4a05      	ldr	r2, [pc, #20]	@ (8001bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f806 	bl	8001bf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e08d      	b.n	8001d3c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d106      	bne.n	8001c3a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff f8a5 	bl	8000d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2224      	movs	r2, #36	@ 0x24
 8001c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d107      	bne.n	8001c88 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	e006      	b.n	8001c96 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c94:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d108      	bne.n	8001cb0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	e007      	b.n	8001cc0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cbe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cd2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ce2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69d9      	ldr	r1, [r3, #28]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1a      	ldr	r2, [r3, #32]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b20      	cmp	r3, #32
 8001d58:	d138      	bne.n	8001dcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e032      	b.n	8001dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2224      	movs	r2, #36	@ 0x24
 8001d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6819      	ldr	r1, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
  }
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b085      	sub	sp, #20
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d139      	bne.n	8001e64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e033      	b.n	8001e66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2224      	movs	r2, #36	@ 0x24
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
  }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af02      	add	r7, sp, #8
 8001e78:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e101      	b.n	8002088 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff f91d 	bl	80010d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fb65 	bl	8004580 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7c1a      	ldrb	r2, [r3, #16]
 8001ebe:	f88d 2000 	strb.w	r2, [sp]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec6:	f002 fb2e 	bl	8004526 <USB_CoreInit>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0d5      	b.n	8002088 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 fb5d 	bl	80045a2 <USB_SetCurrentMode>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0c6      	b.n	8002088 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	e04a      	b.n	8001f96 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3315      	adds	r3, #21
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	3314      	adds	r3, #20
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	b298      	uxth	r0, r3
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	332e      	adds	r3, #46	@ 0x2e
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3318      	adds	r3, #24
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	331c      	adds	r3, #28
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3320      	adds	r3, #32
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3324      	adds	r3, #36	@ 0x24
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	3301      	adds	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	791b      	ldrb	r3, [r3, #4]
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d3af      	bcc.n	8001f00 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e044      	b.n	8002030 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	3301      	adds	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	791b      	ldrb	r3, [r3, #4]
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	429a      	cmp	r2, r3
 8002038:	d3b5      	bcc.n	8001fa6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7c1a      	ldrb	r2, [r3, #16]
 8002042:	f88d 2000 	strb.w	r2, [sp]
 8002046:	3304      	adds	r3, #4
 8002048:	cb0e      	ldmia	r3, {r1, r2, r3}
 800204a:	f002 faf7 	bl	800463c <USB_DevInit>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e013      	b.n	8002088 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	7b1b      	ldrb	r3, [r3, #12]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f80a 	bl	8002090 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f002 fc9c 	bl	80049be <USB_DevDisconnect>

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c2:	f043 0303 	orr.w	r3, r3, #3
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020dc:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a04      	ldr	r2, [pc, #16]	@ (80020f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40007000 	.word	0x40007000

080020f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020fc:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <HAL_PWREx_GetVoltageRange+0x18>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40007000 	.word	0x40007000

08002114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002122:	d130      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002124:	4b23      	ldr	r3, [pc, #140]	@ (80021b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800212c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002130:	d038      	beq.n	80021a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002132:	4b20      	ldr	r3, [pc, #128]	@ (80021b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800213a:	4a1e      	ldr	r2, [pc, #120]	@ (80021b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002140:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002142:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2232      	movs	r2, #50	@ 0x32
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	4a1b      	ldr	r2, [pc, #108]	@ (80021bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0c9b      	lsrs	r3, r3, #18
 8002154:	3301      	adds	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002158:	e002      	b.n	8002160 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3b01      	subs	r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002160:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800216c:	d102      	bne.n	8002174 <HAL_PWREx_ControlVoltageScaling+0x60>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f2      	bne.n	800215a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002180:	d110      	bne.n	80021a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e00f      	b.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002186:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800218e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002192:	d007      	beq.n	80021a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800219c:	4a05      	ldr	r2, [pc, #20]	@ (80021b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40007000 	.word	0x40007000
 80021b8:	20000000 	.word	0x20000000
 80021bc:	431bde83 	.word	0x431bde83

080021c0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ce:	6053      	str	r3, [r2, #4]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40007000 	.word	0x40007000

080021e0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff f8de 	bl	80013a8 <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e063      	b.n	80022c0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10b      	bne.n	800221c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7fe fe17 	bl	8000e40 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002212:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f858 	bl	80022cc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	3b01      	subs	r3, #1
 800222c:	021a      	lsls	r2, r3, #8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	2120      	movs	r1, #32
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f850 	bl	80022e8 <QSPI_WaitFlagStateUntilTimeout>
 8002248:	4603      	mov	r3, r0
 800224a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800224c:	7afb      	ldrb	r3, [r7, #11]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d131      	bne.n	80022b6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800225c:	f023 0310 	bic.w	r3, r3, #16
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6852      	ldr	r2, [r2, #4]
 8002264:	0611      	lsls	r1, r2, #24
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68d2      	ldr	r2, [r2, #12]
 800226a:	4311      	orrs	r1, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	430b      	orrs	r3, r1
 8002272:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <HAL_QSPI_Init+0xe8>)
 800227c:	4013      	ands	r3, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6912      	ldr	r2, [r2, #16]
 8002282:	0411      	lsls	r1, r2, #16
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6952      	ldr	r2, [r2, #20]
 8002288:	4311      	orrs	r1, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6992      	ldr	r2, [r2, #24]
 800228e:	4311      	orrs	r1, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	430b      	orrs	r3, r1
 8002296:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80022be:	7afb      	ldrb	r3, [r7, #11]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	ffe0f8fe 	.word	0xffe0f8fe

080022cc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80022f8:	e01a      	b.n	8002330 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002300:	d016      	beq.n	8002330 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002302:	f7ff f851 	bl	80013a8 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	429a      	cmp	r2, r3
 8002310:	d302      	bcc.n	8002318 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10b      	bne.n	8002330 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2204      	movs	r2, #4
 800231c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e00e      	b.n	800234e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf14      	ite	ne
 800233e:	2301      	movne	r3, #1
 8002340:	2300      	moveq	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	429a      	cmp	r2, r3
 800234a:	d1d6      	bne.n	80022fa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e3ca      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236a:	4b97      	ldr	r3, [pc, #604]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002374:	4b94      	ldr	r3, [pc, #592]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80e4 	beq.w	8002554 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_RCC_OscConfig+0x4a>
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	f040 808b 	bne.w	80024b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b01      	cmp	r3, #1
 800239e:	f040 8087 	bne.w	80024b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a2:	4b89      	ldr	r3, [pc, #548]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x62>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e3a2      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	4b82      	ldr	r3, [pc, #520]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <HAL_RCC_OscConfig+0x7c>
 80023ca:	4b7f      	ldr	r3, [pc, #508]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d2:	e005      	b.n	80023e0 <HAL_RCC_OscConfig+0x88>
 80023d4:	4b7c      	ldr	r3, [pc, #496]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d223      	bcs.n	800242c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fd55 	bl	8002e98 <RCC_SetFlashLatencyFromMSIRange>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e383      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f8:	4b73      	ldr	r3, [pc, #460]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a72      	ldr	r2, [pc, #456]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023fe:	f043 0308 	orr.w	r3, r3, #8
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b70      	ldr	r3, [pc, #448]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	496d      	ldr	r1, [pc, #436]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002416:	4b6c      	ldr	r3, [pc, #432]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	4968      	ldr	r1, [pc, #416]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
 800242a:	e025      	b.n	8002478 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800242c:	4b66      	ldr	r3, [pc, #408]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a65      	ldr	r2, [pc, #404]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4b63      	ldr	r3, [pc, #396]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4960      	ldr	r1, [pc, #384]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800244a:	4b5f      	ldr	r3, [pc, #380]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	495b      	ldr	r1, [pc, #364]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fd15 	bl	8002e98 <RCC_SetFlashLatencyFromMSIRange>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e343      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002478:	f000 fc4a 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b52      	ldr	r3, [pc, #328]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	4950      	ldr	r1, [pc, #320]	@ (80025cc <HAL_RCC_OscConfig+0x274>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
 8002494:	4a4e      	ldr	r2, [pc, #312]	@ (80025d0 <HAL_RCC_OscConfig+0x278>)
 8002496:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002498:	4b4e      	ldr	r3, [pc, #312]	@ (80025d4 <HAL_RCC_OscConfig+0x27c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe ff33 	bl	8001308 <HAL_InitTick>
 80024a2:	4603      	mov	r3, r0
 80024a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d052      	beq.n	8002552 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	e327      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d032      	beq.n	800251e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024b8:	4b43      	ldr	r3, [pc, #268]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a42      	ldr	r2, [pc, #264]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024c4:	f7fe ff70 	bl	80013a8 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024cc:	f7fe ff6c 	bl	80013a8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e310      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024de:	4b3a      	ldr	r3, [pc, #232]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ea:	4b37      	ldr	r3, [pc, #220]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a36      	ldr	r2, [pc, #216]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b34      	ldr	r3, [pc, #208]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4931      	ldr	r1, [pc, #196]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002508:	4b2f      	ldr	r3, [pc, #188]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	492c      	ldr	r1, [pc, #176]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
 800251c:	e01a      	b.n	8002554 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800251e:	4b2a      	ldr	r3, [pc, #168]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a29      	ldr	r2, [pc, #164]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800252a:	f7fe ff3d 	bl	80013a8 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002532:	f7fe ff39 	bl	80013a8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e2dd      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002544:	4b20      	ldr	r3, [pc, #128]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x1da>
 8002550:	e000      	b.n	8002554 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002552:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d074      	beq.n	800264a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b08      	cmp	r3, #8
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x21a>
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b0c      	cmp	r3, #12
 800256a:	d10e      	bne.n	800258a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d10b      	bne.n	800258a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d064      	beq.n	8002648 <HAL_RCC_OscConfig+0x2f0>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d160      	bne.n	8002648 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e2ba      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x24a>
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0b      	ldr	r2, [pc, #44]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800259a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e026      	b.n	80025f0 <HAL_RCC_OscConfig+0x298>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025aa:	d115      	bne.n	80025d8 <HAL_RCC_OscConfig+0x280>
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a05      	ldr	r2, [pc, #20]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80025b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a02      	ldr	r2, [pc, #8]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80025be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	e014      	b.n	80025f0 <HAL_RCC_OscConfig+0x298>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08004af0 	.word	0x08004af0
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000004 	.word	0x20000004
 80025d8:	4ba0      	ldr	r3, [pc, #640]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a9f      	ldr	r2, [pc, #636]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80025de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b9d      	ldr	r3, [pc, #628]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a9c      	ldr	r2, [pc, #624]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80025ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fed6 	bl	80013a8 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe fed2 	bl	80013a8 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	@ 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e276      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	4b92      	ldr	r3, [pc, #584]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x2a8>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fec2 	bl	80013a8 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe febe 	bl	80013a8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	@ 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e262      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263a:	4b88      	ldr	r3, [pc, #544]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x2d0>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d060      	beq.n	8002718 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d005      	beq.n	8002668 <HAL_RCC_OscConfig+0x310>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d119      	bne.n	8002696 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d116      	bne.n	8002696 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002668:	4b7c      	ldr	r3, [pc, #496]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x328>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e23f      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b76      	ldr	r3, [pc, #472]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	4973      	ldr	r1, [pc, #460]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002694:	e040      	b.n	8002718 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d023      	beq.n	80026e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269e:	4b6f      	ldr	r3, [pc, #444]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6e      	ldr	r2, [pc, #440]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7fe fe7d 	bl	80013a8 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b2:	f7fe fe79 	bl	80013a8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e21d      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c4:	4b65      	ldr	r3, [pc, #404]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b62      	ldr	r3, [pc, #392]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	495f      	ldr	r1, [pc, #380]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
 80026e4:	e018      	b.n	8002718 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e6:	4b5d      	ldr	r3, [pc, #372]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a5c      	ldr	r2, [pc, #368]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe fe59 	bl	80013a8 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe fe55 	bl	80013a8 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e1f9      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800270c:	4b53      	ldr	r3, [pc, #332]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d03c      	beq.n	800279e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01c      	beq.n	8002766 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272c:	4b4b      	ldr	r3, [pc, #300]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002732:	4a4a      	ldr	r2, [pc, #296]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe fe34 	bl	80013a8 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7fe fe30 	bl	80013a8 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1d4      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002756:	4b41      	ldr	r3, [pc, #260]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ef      	beq.n	8002744 <HAL_RCC_OscConfig+0x3ec>
 8002764:	e01b      	b.n	800279e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002766:	4b3d      	ldr	r3, [pc, #244]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002768:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800276c:	4a3b      	ldr	r2, [pc, #236]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7fe fe17 	bl	80013a8 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277e:	f7fe fe13 	bl	80013a8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1b7      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002790:	4b32      	ldr	r3, [pc, #200]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ef      	bne.n	800277e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80a6 	beq.w	80028f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ac:	2300      	movs	r3, #0
 80027ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027b0:	4b2a      	ldr	r3, [pc, #168]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10d      	bne.n	80027d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027bc:	4b27      	ldr	r3, [pc, #156]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	4a26      	ldr	r2, [pc, #152]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80027c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027c8:	4b24      	ldr	r3, [pc, #144]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d4:	2301      	movs	r3, #1
 80027d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d8:	4b21      	ldr	r3, [pc, #132]	@ (8002860 <HAL_RCC_OscConfig+0x508>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d118      	bne.n	8002816 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <HAL_RCC_OscConfig+0x508>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002860 <HAL_RCC_OscConfig+0x508>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f0:	f7fe fdda 	bl	80013a8 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f8:	f7fe fdd6 	bl	80013a8 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e17a      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_RCC_OscConfig+0x508>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d108      	bne.n	8002830 <HAL_RCC_OscConfig+0x4d8>
 800281e:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	4a0d      	ldr	r2, [pc, #52]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800282e:	e029      	b.n	8002884 <HAL_RCC_OscConfig+0x52c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b05      	cmp	r3, #5
 8002836:	d115      	bne.n	8002864 <HAL_RCC_OscConfig+0x50c>
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283e:	4a07      	ldr	r2, [pc, #28]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002848:	4b04      	ldr	r3, [pc, #16]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	4a03      	ldr	r2, [pc, #12]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002858:	e014      	b.n	8002884 <HAL_RCC_OscConfig+0x52c>
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	40007000 	.word	0x40007000
 8002864:	4b9c      	ldr	r3, [pc, #624]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286a:	4a9b      	ldr	r2, [pc, #620]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002874:	4b98      	ldr	r3, [pc, #608]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	4a97      	ldr	r2, [pc, #604]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 800287c:	f023 0304 	bic.w	r3, r3, #4
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d016      	beq.n	80028ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7fe fd8c 	bl	80013a8 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7fe fd88 	bl	80013a8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e12a      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028aa:	4b8b      	ldr	r3, [pc, #556]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ed      	beq.n	8002894 <HAL_RCC_OscConfig+0x53c>
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7fe fd75 	bl	80013a8 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7fe fd71 	bl	80013a8 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e113      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ed      	bne.n	80028c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e6:	7ffb      	ldrb	r3, [r7, #31]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4b7a      	ldr	r3, [pc, #488]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f0:	4a79      	ldr	r2, [pc, #484]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80fe 	beq.w	8002afe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002906:	2b02      	cmp	r3, #2
 8002908:	f040 80d0 	bne.w	8002aac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800290c:	4b72      	ldr	r3, [pc, #456]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0203 	and.w	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	429a      	cmp	r2, r3
 800291e:	d130      	bne.n	8002982 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	3b01      	subs	r3, #1
 800292c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d127      	bne.n	8002982 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d11f      	bne.n	8002982 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800294c:	2a07      	cmp	r2, #7
 800294e:	bf14      	ite	ne
 8002950:	2201      	movne	r2, #1
 8002952:	2200      	moveq	r2, #0
 8002954:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002956:	4293      	cmp	r3, r2
 8002958:	d113      	bne.n	8002982 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	3b01      	subs	r3, #1
 8002968:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d109      	bne.n	8002982 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	3b01      	subs	r3, #1
 800297c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d06e      	beq.n	8002a60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b0c      	cmp	r3, #12
 8002986:	d069      	beq.n	8002a5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002988:	4b53      	ldr	r3, [pc, #332]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d105      	bne.n	80029a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002994:	4b50      	ldr	r3, [pc, #320]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0ad      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029a4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80029aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029b0:	f7fe fcfa 	bl	80013a8 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe fcf6 	bl	80013a8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e09a      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ca:	4b43      	ldr	r3, [pc, #268]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d6:	4b40      	ldr	r3, [pc, #256]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	4b40      	ldr	r3, [pc, #256]	@ (8002adc <HAL_RCC_OscConfig+0x784>)
 80029dc:	4013      	ands	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029e6:	3a01      	subs	r2, #1
 80029e8:	0112      	lsls	r2, r2, #4
 80029ea:	4311      	orrs	r1, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029f0:	0212      	lsls	r2, r2, #8
 80029f2:	4311      	orrs	r1, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029f8:	0852      	lsrs	r2, r2, #1
 80029fa:	3a01      	subs	r2, #1
 80029fc:	0552      	lsls	r2, r2, #21
 80029fe:	4311      	orrs	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a04:	0852      	lsrs	r2, r2, #1
 8002a06:	3a01      	subs	r2, #1
 8002a08:	0652      	lsls	r2, r2, #25
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a10:	0912      	lsrs	r2, r2, #4
 8002a12:	0452      	lsls	r2, r2, #17
 8002a14:	430a      	orrs	r2, r1
 8002a16:	4930      	ldr	r1, [pc, #192]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a28:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a34:	f7fe fcb8 	bl	80013a8 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe fcb4 	bl	80013a8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e058      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4e:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a5a:	e050      	b.n	8002afe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e04f      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a60:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d148      	bne.n	8002afe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a78:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a16      	ldr	r2, [pc, #88]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a84:	f7fe fc90 	bl	80013a8 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fc8c 	bl	80013a8 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e030      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x734>
 8002aaa:	e028      	b.n	8002afe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d023      	beq.n	8002afa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a08      	ldr	r2, [pc, #32]	@ (8002ad8 <HAL_RCC_OscConfig+0x780>)
 8002ab8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe fc73 	bl	80013a8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac4:	e00c      	b.n	8002ae0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe fc6f 	bl	80013a8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d905      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e013      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae0:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <HAL_RCC_OscConfig+0x7b0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ec      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_RCC_OscConfig+0x7b0>)
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	4905      	ldr	r1, [pc, #20]	@ (8002b08 <HAL_RCC_OscConfig+0x7b0>)
 8002af2:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <HAL_RCC_OscConfig+0x7b4>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	60cb      	str	r3, [r1, #12]
 8002af8:	e001      	b.n	8002afe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3720      	adds	r7, #32
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	feeefffc 	.word	0xfeeefffc

08002b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0e7      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b75      	ldr	r3, [pc, #468]	@ (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d910      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b72      	ldr	r3, [pc, #456]	@ (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 0207 	bic.w	r2, r3, #7
 8002b3a:	4970      	ldr	r1, [pc, #448]	@ (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b6e      	ldr	r3, [pc, #440]	@ (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0cf      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d010      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	4b66      	ldr	r3, [pc, #408]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d908      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b70:	4b63      	ldr	r3, [pc, #396]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4960      	ldr	r1, [pc, #384]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d04c      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b96:	4b5a      	ldr	r3, [pc, #360]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d121      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0a6      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bae:	4b54      	ldr	r3, [pc, #336]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d115      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e09a      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e08e      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e086      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b46      	ldr	r3, [pc, #280]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4943      	ldr	r1, [pc, #268]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fbd6 	bl	80013a8 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fe fbd2 	bl	80013a8 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e06e      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b3a      	ldr	r3, [pc, #232]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	4b31      	ldr	r3, [pc, #196]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d208      	bcs.n	8002c56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b2e      	ldr	r3, [pc, #184]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	492b      	ldr	r1, [pc, #172]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c56:	4b29      	ldr	r3, [pc, #164]	@ (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d210      	bcs.n	8002c86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c64:	4b25      	ldr	r3, [pc, #148]	@ (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f023 0207 	bic.w	r2, r3, #7
 8002c6c:	4923      	ldr	r1, [pc, #140]	@ (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c74:	4b21      	ldr	r3, [pc, #132]	@ (8002cfc <HAL_RCC_ClockConfig+0x1ec>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e036      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c92:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4918      	ldr	r1, [pc, #96]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d009      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb0:	4b13      	ldr	r3, [pc, #76]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4910      	ldr	r1, [pc, #64]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cc4:	f000 f824 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	490b      	ldr	r1, [pc, #44]	@ (8002d04 <HAL_RCC_ClockConfig+0x1f4>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce0:	4a09      	ldr	r2, [pc, #36]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ce4:	4b09      	ldr	r3, [pc, #36]	@ (8002d0c <HAL_RCC_ClockConfig+0x1fc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe fb0d 	bl	8001308 <HAL_InitTick>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cf2:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40022000 	.word	0x40022000
 8002d00:	40021000 	.word	0x40021000
 8002d04:	08004af0 	.word	0x08004af0
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	20000004 	.word	0x20000004

08002d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	@ 0x24
 8002d14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d28:	4b3b      	ldr	r3, [pc, #236]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x34>
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d121      	bne.n	8002d82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d11e      	bne.n	8002d82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d44:	4b34      	ldr	r3, [pc, #208]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d50:	4b31      	ldr	r3, [pc, #196]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	e005      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d60:	4b2d      	ldr	r3, [pc, #180]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d102      	bne.n	8002d8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d88:	4b25      	ldr	r3, [pc, #148]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	e004      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d94:	4b23      	ldr	r3, [pc, #140]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b0c      	cmp	r3, #12
 8002d9c:	d134      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d003      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0xac>
 8002db4:	e005      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002db6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x110>)
 8002db8:	617b      	str	r3, [r7, #20]
      break;
 8002dba:	e005      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dbc:	4b19      	ldr	r3, [pc, #100]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dbe:	617b      	str	r3, [r7, #20]
      break;
 8002dc0:	e002      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	617b      	str	r3, [r7, #20]
      break;
 8002dc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dc8:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dd6:	4b10      	ldr	r3, [pc, #64]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	fb03 f202 	mul.w	r2, r3, r2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dee:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	0e5b      	lsrs	r3, r3, #25
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e08:	69bb      	ldr	r3, [r7, #24]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	@ 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08004b08 	.word	0x08004b08
 8002e20:	00f42400 	.word	0x00f42400
 8002e24:	007a1200 	.word	0x007a1200

08002e28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	@ (8002e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000000 	.word	0x20000000

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e44:	f7ff fff0 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4904      	ldr	r1, [pc, #16]	@ (8002e68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	08004b00 	.word	0x08004b00

08002e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e70:	f7ff ffda 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	0adb      	lsrs	r3, r3, #11
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	4904      	ldr	r1, [pc, #16]	@ (8002e94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08004b00 	.word	0x08004b00

08002e98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002eb0:	f7ff f922 	bl	80020f8 <HAL_PWREx_GetVoltageRange>
 8002eb4:	6178      	str	r0, [r7, #20]
 8002eb6:	e014      	b.n	8002ee2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	4b25      	ldr	r3, [pc, #148]	@ (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebc:	4a24      	ldr	r2, [pc, #144]	@ (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ec4:	4b22      	ldr	r3, [pc, #136]	@ (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ed0:	f7ff f912 	bl	80020f8 <HAL_PWREx_GetVoltageRange>
 8002ed4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eda:	4a1d      	ldr	r2, [pc, #116]	@ (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002edc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ee0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ee8:	d10b      	bne.n	8002f02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b80      	cmp	r3, #128	@ 0x80
 8002eee:	d919      	bls.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ef4:	d902      	bls.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	e013      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002efc:	2301      	movs	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	e010      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b80      	cmp	r3, #128	@ 0x80
 8002f06:	d902      	bls.n	8002f0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f08:	2303      	movs	r3, #3
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e00a      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b80      	cmp	r3, #128	@ 0x80
 8002f12:	d102      	bne.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f14:	2302      	movs	r3, #2
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	e004      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b70      	cmp	r3, #112	@ 0x70
 8002f1e:	d101      	bne.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f20:	2301      	movs	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f24:	4b0b      	ldr	r3, [pc, #44]	@ (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 0207 	bic.w	r2, r3, #7
 8002f2c:	4909      	ldr	r1, [pc, #36]	@ (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f34:	4b07      	ldr	r3, [pc, #28]	@ (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40022000 	.word	0x40022000

08002f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f60:	2300      	movs	r3, #0
 8002f62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f64:	2300      	movs	r3, #0
 8002f66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d041      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f78:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f7c:	d02a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f7e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f82:	d824      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f88:	d008      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f8e:	d81e      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f98:	d010      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f9a:	e018      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f9c:	4b86      	ldr	r3, [pc, #536]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a85      	ldr	r2, [pc, #532]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 facb 	bl	800354c <RCCEx_PLLSAI1_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fba:	e00c      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3320      	adds	r3, #32
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fbb6 	bl	8003734 <RCCEx_PLLSAI2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fcc:	e003      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fdc:	4b76      	ldr	r3, [pc, #472]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fea:	4973      	ldr	r1, [pc, #460]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ff2:	e001      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d041      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003008:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800300c:	d02a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800300e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003012:	d824      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003018:	d008      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800301a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800301e:	d81e      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003028:	d010      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800302a:	e018      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800302c:	4b62      	ldr	r3, [pc, #392]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a61      	ldr	r2, [pc, #388]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003036:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003038:	e015      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fa83 	bl	800354c <RCCEx_PLLSAI1_Config>
 8003046:	4603      	mov	r3, r0
 8003048:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800304a:	e00c      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3320      	adds	r3, #32
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fb6e 	bl	8003734 <RCCEx_PLLSAI2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800305c:	e003      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	74fb      	strb	r3, [r7, #19]
      break;
 8003062:	e000      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003066:	7cfb      	ldrb	r3, [r7, #19]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10b      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800306c:	4b52      	ldr	r3, [pc, #328]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003072:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800307a:	494f      	ldr	r1, [pc, #316]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003082:	e001      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80a0 	beq.w	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800309a:	4b47      	ldr	r3, [pc, #284]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00d      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b0:	4b41      	ldr	r3, [pc, #260]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	4a40      	ldr	r2, [pc, #256]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80030bc:	4b3e      	ldr	r3, [pc, #248]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c8:	2301      	movs	r3, #1
 80030ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030cc:	4b3b      	ldr	r3, [pc, #236]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a3a      	ldr	r2, [pc, #232]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030d8:	f7fe f966 	bl	80013a8 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030de:	e009      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e0:	f7fe f962 	bl	80013a8 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d902      	bls.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	74fb      	strb	r3, [r7, #19]
        break;
 80030f2:	e005      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030f4:	4b31      	ldr	r3, [pc, #196]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ef      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d15c      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003106:	4b2c      	ldr	r3, [pc, #176]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003110:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01f      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	d019      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003124:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800312e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003130:	4b21      	ldr	r3, [pc, #132]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003136:	4a20      	ldr	r2, [pc, #128]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800313c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003140:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003146:	4a1c      	ldr	r2, [pc, #112]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800314c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003150:	4a19      	ldr	r2, [pc, #100]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fe f921 	bl	80013a8 <HAL_GetTick>
 8003166:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003168:	e00b      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fe f91d 	bl	80013a8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d902      	bls.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	74fb      	strb	r3, [r7, #19]
            break;
 8003180:	e006      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003182:	4b0d      	ldr	r3, [pc, #52]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ec      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10c      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003196:	4b08      	ldr	r3, [pc, #32]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031a6:	4904      	ldr	r1, [pc, #16]	@ (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031ae:	e009      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	74bb      	strb	r3, [r7, #18]
 80031b4:	e006      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c4:	7c7b      	ldrb	r3, [r7, #17]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d105      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ca:	4b9e      	ldr	r3, [pc, #632]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ce:	4a9d      	ldr	r2, [pc, #628]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031e2:	4b98      	ldr	r3, [pc, #608]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e8:	f023 0203 	bic.w	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f0:	4994      	ldr	r1, [pc, #592]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003204:	4b8f      	ldr	r3, [pc, #572]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320a:	f023 020c 	bic.w	r2, r3, #12
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003212:	498c      	ldr	r1, [pc, #560]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003226:	4b87      	ldr	r3, [pc, #540]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	4983      	ldr	r1, [pc, #524]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003248:	4b7e      	ldr	r3, [pc, #504]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	497b      	ldr	r1, [pc, #492]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800326a:	4b76      	ldr	r3, [pc, #472]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003270:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003278:	4972      	ldr	r1, [pc, #456]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800328c:	4b6d      	ldr	r3, [pc, #436]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003292:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329a:	496a      	ldr	r1, [pc, #424]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ae:	4b65      	ldr	r3, [pc, #404]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032bc:	4961      	ldr	r1, [pc, #388]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032d0:	4b5c      	ldr	r3, [pc, #368]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032de:	4959      	ldr	r1, [pc, #356]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032f2:	4b54      	ldr	r3, [pc, #336]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003300:	4950      	ldr	r1, [pc, #320]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003314:	4b4b      	ldr	r3, [pc, #300]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003322:	4948      	ldr	r1, [pc, #288]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003336:	4b43      	ldr	r3, [pc, #268]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003344:	493f      	ldr	r1, [pc, #252]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d028      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003358:	4b3a      	ldr	r3, [pc, #232]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003366:	4937      	ldr	r1, [pc, #220]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003372:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003376:	d106      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003378:	4b32      	ldr	r3, [pc, #200]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a31      	ldr	r2, [pc, #196]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003382:	60d3      	str	r3, [r2, #12]
 8003384:	e011      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800338a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800338e:	d10c      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	2101      	movs	r1, #1
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f8d8 	bl	800354c <RCCEx_PLLSAI1_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033a0:	7cfb      	ldrb	r3, [r7, #19]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033a6:	7cfb      	ldrb	r3, [r7, #19]
 80033a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d028      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033b6:	4b23      	ldr	r3, [pc, #140]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c4:	491f      	ldr	r1, [pc, #124]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033d4:	d106      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	4a1a      	ldr	r2, [pc, #104]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033e0:	60d3      	str	r3, [r2, #12]
 80033e2:	e011      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3304      	adds	r3, #4
 80033f2:	2101      	movs	r1, #1
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f8a9 	bl	800354c <RCCEx_PLLSAI1_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d02b      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003414:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003422:	4908      	ldr	r1, [pc, #32]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800342e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003432:	d109      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003434:	4b03      	ldr	r3, [pc, #12]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a02      	ldr	r2, [pc, #8]	@ (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800343e:	60d3      	str	r3, [r2, #12]
 8003440:	e014      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800344c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003450:	d10c      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	2101      	movs	r1, #1
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f877 	bl	800354c <RCCEx_PLLSAI1_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02f      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003478:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003486:	4928      	ldr	r1, [pc, #160]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003496:	d10d      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	2102      	movs	r1, #2
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f854 	bl	800354c <RCCEx_PLLSAI1_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d014      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034ae:	7cfb      	ldrb	r3, [r7, #19]
 80034b0:	74bb      	strb	r3, [r7, #18]
 80034b2:	e011      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3320      	adds	r3, #32
 80034c2:	2102      	movs	r1, #2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 f935 	bl	8003734 <RCCEx_PLLSAI2_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034e4:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034f2:	490d      	ldr	r1, [pc, #52]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003506:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003516:	4904      	ldr	r1, [pc, #16]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800351e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000

0800352c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000

0800354c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800355a:	4b75      	ldr	r3, [pc, #468]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d018      	beq.n	8003598 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003566:	4b72      	ldr	r3, [pc, #456]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0203 	and.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d10d      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
       ||
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800357e:	4b6c      	ldr	r3, [pc, #432]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
       ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d047      	beq.n	8003622 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
 8003596:	e044      	b.n	8003622 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b03      	cmp	r3, #3
 800359e:	d018      	beq.n	80035d2 <RCCEx_PLLSAI1_Config+0x86>
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d825      	bhi.n	80035f0 <RCCEx_PLLSAI1_Config+0xa4>
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d002      	beq.n	80035ae <RCCEx_PLLSAI1_Config+0x62>
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d009      	beq.n	80035c0 <RCCEx_PLLSAI1_Config+0x74>
 80035ac:	e020      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035ae:	4b60      	ldr	r3, [pc, #384]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d11d      	bne.n	80035f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035be:	e01a      	b.n	80035f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d116      	bne.n	80035fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d0:	e013      	b.n	80035fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035d2:	4b57      	ldr	r3, [pc, #348]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035de:	4b54      	ldr	r3, [pc, #336]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035ee:	e006      	b.n	80035fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
      break;
 80035f4:	e004      	b.n	8003600 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035f6:	bf00      	nop
 80035f8:	e002      	b.n	8003600 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035fa:	bf00      	nop
 80035fc:	e000      	b.n	8003600 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10d      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003606:	4b4a      	ldr	r3, [pc, #296]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	430b      	orrs	r3, r1
 800361c:	4944      	ldr	r1, [pc, #272]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361e:	4313      	orrs	r3, r2
 8003620:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d17d      	bne.n	8003724 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003628:	4b41      	ldr	r3, [pc, #260]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a40      	ldr	r2, [pc, #256]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003634:	f7fd feb8 	bl	80013a8 <HAL_GetTick>
 8003638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800363a:	e009      	b.n	8003650 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800363c:	f7fd feb4 	bl	80013a8 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d902      	bls.n	8003650 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	73fb      	strb	r3, [r7, #15]
        break;
 800364e:	e005      	b.n	800365c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003650:	4b37      	ldr	r3, [pc, #220]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ef      	bne.n	800363c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d160      	bne.n	8003724 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d111      	bne.n	800368c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003668:	4b31      	ldr	r3, [pc, #196]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6892      	ldr	r2, [r2, #8]
 8003678:	0211      	lsls	r1, r2, #8
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68d2      	ldr	r2, [r2, #12]
 800367e:	0912      	lsrs	r2, r2, #4
 8003680:	0452      	lsls	r2, r2, #17
 8003682:	430a      	orrs	r2, r1
 8003684:	492a      	ldr	r1, [pc, #168]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	610b      	str	r3, [r1, #16]
 800368a:	e027      	b.n	80036dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d112      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003692:	4b27      	ldr	r3, [pc, #156]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800369a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	0211      	lsls	r1, r2, #8
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6912      	ldr	r2, [r2, #16]
 80036a8:	0852      	lsrs	r2, r2, #1
 80036aa:	3a01      	subs	r2, #1
 80036ac:	0552      	lsls	r2, r2, #21
 80036ae:	430a      	orrs	r2, r1
 80036b0:	491f      	ldr	r1, [pc, #124]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	610b      	str	r3, [r1, #16]
 80036b6:	e011      	b.n	80036dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6892      	ldr	r2, [r2, #8]
 80036c8:	0211      	lsls	r1, r2, #8
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6952      	ldr	r2, [r2, #20]
 80036ce:	0852      	lsrs	r2, r2, #1
 80036d0:	3a01      	subs	r2, #1
 80036d2:	0652      	lsls	r2, r2, #25
 80036d4:	430a      	orrs	r2, r1
 80036d6:	4916      	ldr	r1, [pc, #88]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036dc:	4b14      	ldr	r3, [pc, #80]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a13      	ldr	r2, [pc, #76]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fd fe5e 	bl	80013a8 <HAL_GetTick>
 80036ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036ee:	e009      	b.n	8003704 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036f0:	f7fd fe5a 	bl	80013a8 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d902      	bls.n	8003704 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	73fb      	strb	r3, [r7, #15]
          break;
 8003702:	e005      	b.n	8003710 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003704:	4b0a      	ldr	r3, [pc, #40]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ef      	beq.n	80036f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003716:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	4904      	ldr	r1, [pc, #16]	@ (8003730 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000

08003734 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003742:	4b6a      	ldr	r3, [pc, #424]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d018      	beq.n	8003780 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800374e:	4b67      	ldr	r3, [pc, #412]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0203 	and.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d10d      	bne.n	800377a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
       ||
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003766:	4b61      	ldr	r3, [pc, #388]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
       ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d047      	beq.n	800380a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
 800377e:	e044      	b.n	800380a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d018      	beq.n	80037ba <RCCEx_PLLSAI2_Config+0x86>
 8003788:	2b03      	cmp	r3, #3
 800378a:	d825      	bhi.n	80037d8 <RCCEx_PLLSAI2_Config+0xa4>
 800378c:	2b01      	cmp	r3, #1
 800378e:	d002      	beq.n	8003796 <RCCEx_PLLSAI2_Config+0x62>
 8003790:	2b02      	cmp	r3, #2
 8003792:	d009      	beq.n	80037a8 <RCCEx_PLLSAI2_Config+0x74>
 8003794:	e020      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003796:	4b55      	ldr	r3, [pc, #340]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d11d      	bne.n	80037de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a6:	e01a      	b.n	80037de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037a8:	4b50      	ldr	r3, [pc, #320]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d116      	bne.n	80037e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b8:	e013      	b.n	80037e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ba:	4b4c      	ldr	r3, [pc, #304]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10f      	bne.n	80037e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037c6:	4b49      	ldr	r3, [pc, #292]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037d6:	e006      	b.n	80037e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      break;
 80037dc:	e004      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037de:	bf00      	nop
 80037e0:	e002      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10d      	bne.n	800380a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037ee:	4b3f      	ldr	r3, [pc, #252]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6819      	ldr	r1, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	430b      	orrs	r3, r1
 8003804:	4939      	ldr	r1, [pc, #228]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003806:	4313      	orrs	r3, r2
 8003808:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d167      	bne.n	80038e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003810:	4b36      	ldr	r3, [pc, #216]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a35      	ldr	r2, [pc, #212]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800381a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381c:	f7fd fdc4 	bl	80013a8 <HAL_GetTick>
 8003820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003822:	e009      	b.n	8003838 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003824:	f7fd fdc0 	bl	80013a8 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d902      	bls.n	8003838 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	73fb      	strb	r3, [r7, #15]
        break;
 8003836:	e005      	b.n	8003844 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003838:	4b2c      	ldr	r3, [pc, #176]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ef      	bne.n	8003824 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d14a      	bne.n	80038e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d111      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003850:	4b26      	ldr	r3, [pc, #152]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	0211      	lsls	r1, r2, #8
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68d2      	ldr	r2, [r2, #12]
 8003866:	0912      	lsrs	r2, r2, #4
 8003868:	0452      	lsls	r2, r2, #17
 800386a:	430a      	orrs	r2, r1
 800386c:	491f      	ldr	r1, [pc, #124]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	614b      	str	r3, [r1, #20]
 8003872:	e011      	b.n	8003898 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003874:	4b1d      	ldr	r3, [pc, #116]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800387c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6892      	ldr	r2, [r2, #8]
 8003884:	0211      	lsls	r1, r2, #8
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6912      	ldr	r2, [r2, #16]
 800388a:	0852      	lsrs	r2, r2, #1
 800388c:	3a01      	subs	r2, #1
 800388e:	0652      	lsls	r2, r2, #25
 8003890:	430a      	orrs	r2, r1
 8003892:	4916      	ldr	r1, [pc, #88]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	4313      	orrs	r3, r2
 8003896:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003898:	4b14      	ldr	r3, [pc, #80]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a13      	ldr	r2, [pc, #76]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800389e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7fd fd80 	bl	80013a8 <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038aa:	e009      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038ac:	f7fd fd7c 	bl	80013a8 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d902      	bls.n	80038c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	73fb      	strb	r3, [r7, #15]
          break;
 80038be:	e005      	b.n	80038cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038c0:	4b0a      	ldr	r3, [pc, #40]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ef      	beq.n	80038ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038d2:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	4904      	ldr	r1, [pc, #16]	@ (80038ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000

080038f0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e049      	b.n	8003996 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	795b      	ldrb	r3, [r3, #5]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd fad8 	bl	8000ec8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0204 	orr.w	r2, r2, #4
 800392c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003938:	2b40      	cmp	r3, #64	@ 0x40
 800393a:	d104      	bne.n	8003946 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2204      	movs	r2, #4
 8003940:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e027      	b.n	8003996 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003946:	f7fd fd2f 	bl	80013a8 <HAL_GetTick>
 800394a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800394c:	e015      	b.n	800397a <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800394e:	f7fd fd2b 	bl	80013a8 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d90e      	bls.n	800397a <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d007      	beq.n	800397a <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2204      	movs	r2, #4
 800396e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e00d      	b.n	8003996 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d1e2      	bne.n	800394e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e095      	b.n	8003adc <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d108      	bne.n	80039ca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039c0:	d009      	beq.n	80039d6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	61da      	str	r2, [r3, #28]
 80039c8:	e005      	b.n	80039d6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fd fa89 	bl	8000f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a16:	d902      	bls.n	8003a1e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e002      	b.n	8003a24 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a2c:	d007      	beq.n	8003a3e <HAL_SPI_Init+0xa0>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a36:	d002      	beq.n	8003a3e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a80:	ea42 0103 	orr.w	r1, r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	f003 0204 	and.w	r2, r3, #4
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003aba:	ea42 0103 	orr.w	r1, r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e040      	b.n	8003b78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fa42 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2224      	movs	r2, #36	@ 0x24
 8003b10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0201 	bic.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fae0 	bl	80040f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f825 	bl	8003b80 <UART_SetConfig>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e01b      	b.n	8003b78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fb5f 	bl	8004234 <UART_CheckIdleState>
 8003b76:	4603      	mov	r3, r0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b84:	b08a      	sub	sp, #40	@ 0x28
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4ba4      	ldr	r3, [pc, #656]	@ (8003e40 <UART_SetConfig+0x2c0>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a99      	ldr	r2, [pc, #612]	@ (8003e44 <UART_SetConfig+0x2c4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d004      	beq.n	8003bec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be8:	4313      	orrs	r3, r2
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a90      	ldr	r2, [pc, #576]	@ (8003e48 <UART_SetConfig+0x2c8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d126      	bne.n	8003c58 <UART_SetConfig+0xd8>
 8003c0a:	4b90      	ldr	r3, [pc, #576]	@ (8003e4c <UART_SetConfig+0x2cc>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d81b      	bhi.n	8003c50 <UART_SetConfig+0xd0>
 8003c18:	a201      	add	r2, pc, #4	@ (adr r2, 8003c20 <UART_SetConfig+0xa0>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c31 	.word	0x08003c31
 8003c24:	08003c41 	.word	0x08003c41
 8003c28:	08003c39 	.word	0x08003c39
 8003c2c:	08003c49 	.word	0x08003c49
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c36:	e116      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c3e:	e112      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003c40:	2304      	movs	r3, #4
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c46:	e10e      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003c48:	2308      	movs	r3, #8
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c4e:	e10a      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003c50:	2310      	movs	r3, #16
 8003c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c56:	e106      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a7c      	ldr	r2, [pc, #496]	@ (8003e50 <UART_SetConfig+0x2d0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d138      	bne.n	8003cd4 <UART_SetConfig+0x154>
 8003c62:	4b7a      	ldr	r3, [pc, #488]	@ (8003e4c <UART_SetConfig+0x2cc>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c68:	f003 030c 	and.w	r3, r3, #12
 8003c6c:	2b0c      	cmp	r3, #12
 8003c6e:	d82d      	bhi.n	8003ccc <UART_SetConfig+0x14c>
 8003c70:	a201      	add	r2, pc, #4	@ (adr r2, 8003c78 <UART_SetConfig+0xf8>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003cad 	.word	0x08003cad
 8003c7c:	08003ccd 	.word	0x08003ccd
 8003c80:	08003ccd 	.word	0x08003ccd
 8003c84:	08003ccd 	.word	0x08003ccd
 8003c88:	08003cbd 	.word	0x08003cbd
 8003c8c:	08003ccd 	.word	0x08003ccd
 8003c90:	08003ccd 	.word	0x08003ccd
 8003c94:	08003ccd 	.word	0x08003ccd
 8003c98:	08003cb5 	.word	0x08003cb5
 8003c9c:	08003ccd 	.word	0x08003ccd
 8003ca0:	08003ccd 	.word	0x08003ccd
 8003ca4:	08003ccd 	.word	0x08003ccd
 8003ca8:	08003cc5 	.word	0x08003cc5
 8003cac:	2300      	movs	r3, #0
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb2:	e0d8      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cba:	e0d4      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc2:	e0d0      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cca:	e0cc      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cd2:	e0c8      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a5e      	ldr	r2, [pc, #376]	@ (8003e54 <UART_SetConfig+0x2d4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d125      	bne.n	8003d2a <UART_SetConfig+0x1aa>
 8003cde:	4b5b      	ldr	r3, [pc, #364]	@ (8003e4c <UART_SetConfig+0x2cc>)
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ce8:	2b30      	cmp	r3, #48	@ 0x30
 8003cea:	d016      	beq.n	8003d1a <UART_SetConfig+0x19a>
 8003cec:	2b30      	cmp	r3, #48	@ 0x30
 8003cee:	d818      	bhi.n	8003d22 <UART_SetConfig+0x1a2>
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d00a      	beq.n	8003d0a <UART_SetConfig+0x18a>
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d814      	bhi.n	8003d22 <UART_SetConfig+0x1a2>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <UART_SetConfig+0x182>
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d008      	beq.n	8003d12 <UART_SetConfig+0x192>
 8003d00:	e00f      	b.n	8003d22 <UART_SetConfig+0x1a2>
 8003d02:	2300      	movs	r3, #0
 8003d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d08:	e0ad      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d10:	e0a9      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003d12:	2304      	movs	r3, #4
 8003d14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d18:	e0a5      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d20:	e0a1      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003d22:	2310      	movs	r3, #16
 8003d24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d28:	e09d      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a4a      	ldr	r2, [pc, #296]	@ (8003e58 <UART_SetConfig+0x2d8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d125      	bne.n	8003d80 <UART_SetConfig+0x200>
 8003d34:	4b45      	ldr	r3, [pc, #276]	@ (8003e4c <UART_SetConfig+0x2cc>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d40:	d016      	beq.n	8003d70 <UART_SetConfig+0x1f0>
 8003d42:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d44:	d818      	bhi.n	8003d78 <UART_SetConfig+0x1f8>
 8003d46:	2b80      	cmp	r3, #128	@ 0x80
 8003d48:	d00a      	beq.n	8003d60 <UART_SetConfig+0x1e0>
 8003d4a:	2b80      	cmp	r3, #128	@ 0x80
 8003d4c:	d814      	bhi.n	8003d78 <UART_SetConfig+0x1f8>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <UART_SetConfig+0x1d8>
 8003d52:	2b40      	cmp	r3, #64	@ 0x40
 8003d54:	d008      	beq.n	8003d68 <UART_SetConfig+0x1e8>
 8003d56:	e00f      	b.n	8003d78 <UART_SetConfig+0x1f8>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5e:	e082      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003d60:	2302      	movs	r3, #2
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d66:	e07e      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6e:	e07a      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003d70:	2308      	movs	r3, #8
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d76:	e076      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7e:	e072      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a35      	ldr	r2, [pc, #212]	@ (8003e5c <UART_SetConfig+0x2dc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d12a      	bne.n	8003de0 <UART_SetConfig+0x260>
 8003d8a:	4b30      	ldr	r3, [pc, #192]	@ (8003e4c <UART_SetConfig+0x2cc>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d98:	d01a      	beq.n	8003dd0 <UART_SetConfig+0x250>
 8003d9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d9e:	d81b      	bhi.n	8003dd8 <UART_SetConfig+0x258>
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da4:	d00c      	beq.n	8003dc0 <UART_SetConfig+0x240>
 8003da6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003daa:	d815      	bhi.n	8003dd8 <UART_SetConfig+0x258>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <UART_SetConfig+0x238>
 8003db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003db4:	d008      	beq.n	8003dc8 <UART_SetConfig+0x248>
 8003db6:	e00f      	b.n	8003dd8 <UART_SetConfig+0x258>
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dbe:	e052      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc6:	e04e      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dce:	e04a      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd6:	e046      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003dd8:	2310      	movs	r3, #16
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dde:	e042      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a17      	ldr	r2, [pc, #92]	@ (8003e44 <UART_SetConfig+0x2c4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d13a      	bne.n	8003e60 <UART_SetConfig+0x2e0>
 8003dea:	4b18      	ldr	r3, [pc, #96]	@ (8003e4c <UART_SetConfig+0x2cc>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003df4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003df8:	d01a      	beq.n	8003e30 <UART_SetConfig+0x2b0>
 8003dfa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dfe:	d81b      	bhi.n	8003e38 <UART_SetConfig+0x2b8>
 8003e00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e04:	d00c      	beq.n	8003e20 <UART_SetConfig+0x2a0>
 8003e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e0a:	d815      	bhi.n	8003e38 <UART_SetConfig+0x2b8>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <UART_SetConfig+0x298>
 8003e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e14:	d008      	beq.n	8003e28 <UART_SetConfig+0x2a8>
 8003e16:	e00f      	b.n	8003e38 <UART_SetConfig+0x2b8>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1e:	e022      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003e20:	2302      	movs	r3, #2
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e26:	e01e      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2e:	e01a      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003e30:	2308      	movs	r3, #8
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e36:	e016      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003e38:	2310      	movs	r3, #16
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e3e:	e012      	b.n	8003e66 <UART_SetConfig+0x2e6>
 8003e40:	efff69f3 	.word	0xefff69f3
 8003e44:	40008000 	.word	0x40008000
 8003e48:	40013800 	.word	0x40013800
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40004400 	.word	0x40004400
 8003e54:	40004800 	.word	0x40004800
 8003e58:	40004c00 	.word	0x40004c00
 8003e5c:	40005000 	.word	0x40005000
 8003e60:	2310      	movs	r3, #16
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a9f      	ldr	r2, [pc, #636]	@ (80040e8 <UART_SetConfig+0x568>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d17a      	bne.n	8003f66 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d824      	bhi.n	8003ec2 <UART_SetConfig+0x342>
 8003e78:	a201      	add	r2, pc, #4	@ (adr r2, 8003e80 <UART_SetConfig+0x300>)
 8003e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ec3 	.word	0x08003ec3
 8003e88:	08003ead 	.word	0x08003ead
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003eb3 	.word	0x08003eb3
 8003e94:	08003ec3 	.word	0x08003ec3
 8003e98:	08003ec3 	.word	0x08003ec3
 8003e9c:	08003ec3 	.word	0x08003ec3
 8003ea0:	08003ebb 	.word	0x08003ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea4:	f7fe ffcc 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003ea8:	61f8      	str	r0, [r7, #28]
        break;
 8003eaa:	e010      	b.n	8003ece <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eac:	4b8f      	ldr	r3, [pc, #572]	@ (80040ec <UART_SetConfig+0x56c>)
 8003eae:	61fb      	str	r3, [r7, #28]
        break;
 8003eb0:	e00d      	b.n	8003ece <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb2:	f7fe ff2d 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8003eb6:	61f8      	str	r0, [r7, #28]
        break;
 8003eb8:	e009      	b.n	8003ece <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ebe:	61fb      	str	r3, [r7, #28]
        break;
 8003ec0:	e005      	b.n	8003ece <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ecc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80fb 	beq.w	80040cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4413      	add	r3, r2
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d305      	bcc.n	8003ef2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d903      	bls.n	8003efa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ef8:	e0e8      	b.n	80040cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	2200      	movs	r2, #0
 8003efe:	461c      	mov	r4, r3
 8003f00:	4615      	mov	r5, r2
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	022b      	lsls	r3, r5, #8
 8003f0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f10:	0222      	lsls	r2, r4, #8
 8003f12:	68f9      	ldr	r1, [r7, #12]
 8003f14:	6849      	ldr	r1, [r1, #4]
 8003f16:	0849      	lsrs	r1, r1, #1
 8003f18:	2000      	movs	r0, #0
 8003f1a:	4688      	mov	r8, r1
 8003f1c:	4681      	mov	r9, r0
 8003f1e:	eb12 0a08 	adds.w	sl, r2, r8
 8003f22:	eb43 0b09 	adc.w	fp, r3, r9
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f34:	4650      	mov	r0, sl
 8003f36:	4659      	mov	r1, fp
 8003f38:	f7fc f946 	bl	80001c8 <__aeabi_uldivmod>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4613      	mov	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f4a:	d308      	bcc.n	8003f5e <UART_SetConfig+0x3de>
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f52:	d204      	bcs.n	8003f5e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	60da      	str	r2, [r3, #12]
 8003f5c:	e0b6      	b.n	80040cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f64:	e0b2      	b.n	80040cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f6e:	d15e      	bne.n	800402e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d828      	bhi.n	8003fca <UART_SetConfig+0x44a>
 8003f78:	a201      	add	r2, pc, #4	@ (adr r2, 8003f80 <UART_SetConfig+0x400>)
 8003f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7e:	bf00      	nop
 8003f80:	08003fa5 	.word	0x08003fa5
 8003f84:	08003fad 	.word	0x08003fad
 8003f88:	08003fb5 	.word	0x08003fb5
 8003f8c:	08003fcb 	.word	0x08003fcb
 8003f90:	08003fbb 	.word	0x08003fbb
 8003f94:	08003fcb 	.word	0x08003fcb
 8003f98:	08003fcb 	.word	0x08003fcb
 8003f9c:	08003fcb 	.word	0x08003fcb
 8003fa0:	08003fc3 	.word	0x08003fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa4:	f7fe ff4c 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8003fa8:	61f8      	str	r0, [r7, #28]
        break;
 8003faa:	e014      	b.n	8003fd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fac:	f7fe ff5e 	bl	8002e6c <HAL_RCC_GetPCLK2Freq>
 8003fb0:	61f8      	str	r0, [r7, #28]
        break;
 8003fb2:	e010      	b.n	8003fd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80040ec <UART_SetConfig+0x56c>)
 8003fb6:	61fb      	str	r3, [r7, #28]
        break;
 8003fb8:	e00d      	b.n	8003fd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fba:	f7fe fea9 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8003fbe:	61f8      	str	r0, [r7, #28]
        break;
 8003fc0:	e009      	b.n	8003fd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fc6:	61fb      	str	r3, [r7, #28]
        break;
 8003fc8:	e005      	b.n	8003fd6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d077      	beq.n	80040cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	005a      	lsls	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	441a      	add	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b0f      	cmp	r3, #15
 8003ff6:	d916      	bls.n	8004026 <UART_SetConfig+0x4a6>
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ffe:	d212      	bcs.n	8004026 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	b29b      	uxth	r3, r3
 8004004:	f023 030f 	bic.w	r3, r3, #15
 8004008:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	085b      	lsrs	r3, r3, #1
 800400e:	b29b      	uxth	r3, r3
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	b29a      	uxth	r2, r3
 8004016:	8afb      	ldrh	r3, [r7, #22]
 8004018:	4313      	orrs	r3, r2
 800401a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	8afa      	ldrh	r2, [r7, #22]
 8004022:	60da      	str	r2, [r3, #12]
 8004024:	e052      	b.n	80040cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800402c:	e04e      	b.n	80040cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800402e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004032:	2b08      	cmp	r3, #8
 8004034:	d827      	bhi.n	8004086 <UART_SetConfig+0x506>
 8004036:	a201      	add	r2, pc, #4	@ (adr r2, 800403c <UART_SetConfig+0x4bc>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	08004061 	.word	0x08004061
 8004040:	08004069 	.word	0x08004069
 8004044:	08004071 	.word	0x08004071
 8004048:	08004087 	.word	0x08004087
 800404c:	08004077 	.word	0x08004077
 8004050:	08004087 	.word	0x08004087
 8004054:	08004087 	.word	0x08004087
 8004058:	08004087 	.word	0x08004087
 800405c:	0800407f 	.word	0x0800407f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004060:	f7fe feee 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8004064:	61f8      	str	r0, [r7, #28]
        break;
 8004066:	e014      	b.n	8004092 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004068:	f7fe ff00 	bl	8002e6c <HAL_RCC_GetPCLK2Freq>
 800406c:	61f8      	str	r0, [r7, #28]
        break;
 800406e:	e010      	b.n	8004092 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004070:	4b1e      	ldr	r3, [pc, #120]	@ (80040ec <UART_SetConfig+0x56c>)
 8004072:	61fb      	str	r3, [r7, #28]
        break;
 8004074:	e00d      	b.n	8004092 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004076:	f7fe fe4b 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 800407a:	61f8      	str	r0, [r7, #28]
        break;
 800407c:	e009      	b.n	8004092 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004082:	61fb      	str	r3, [r7, #28]
        break;
 8004084:	e005      	b.n	8004092 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004090:	bf00      	nop
    }

    if (pclk != 0U)
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d019      	beq.n	80040cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	085a      	lsrs	r2, r3, #1
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	441a      	add	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2b0f      	cmp	r3, #15
 80040b0:	d909      	bls.n	80040c6 <UART_SetConfig+0x546>
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b8:	d205      	bcs.n	80040c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	e002      	b.n	80040cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80040d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3728      	adds	r7, #40	@ 0x28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e6:	bf00      	nop
 80040e8:	40008000 	.word	0x40008000
 80040ec:	00f42400 	.word	0x00f42400

080040f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01a      	beq.n	8004206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ee:	d10a      	bne.n	8004206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	605a      	str	r2, [r3, #4]
  }
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b098      	sub	sp, #96	@ 0x60
 8004238:	af02      	add	r7, sp, #8
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004244:	f7fd f8b0 	bl	80013a8 <HAL_GetTick>
 8004248:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b08      	cmp	r3, #8
 8004256:	d12e      	bne.n	80042b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004258:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004260:	2200      	movs	r2, #0
 8004262:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f88c 	bl	8004384 <UART_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d021      	beq.n	80042b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004282:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004286:	653b      	str	r3, [r7, #80]	@ 0x50
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004290:	647b      	str	r3, [r7, #68]	@ 0x44
 8004292:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800429e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e6      	bne.n	8004272 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e062      	b.n	800437c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d149      	bne.n	8004358 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042cc:	2200      	movs	r2, #0
 80042ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f856 	bl	8004384 <UART_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d03c      	beq.n	8004358 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	623b      	str	r3, [r7, #32]
   return(result);
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80042fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800430a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e6      	bne.n	80042de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3308      	adds	r3, #8
 8004316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3308      	adds	r3, #8
 800432e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004330:	61fa      	str	r2, [r7, #28]
 8004332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	617b      	str	r3, [r7, #20]
   return(result);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e5      	bne.n	8004310 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e011      	b.n	800437c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3758      	adds	r7, #88	@ 0x58
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	4613      	mov	r3, r2
 8004392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004394:	e04f      	b.n	8004436 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800439c:	d04b      	beq.n	8004436 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439e:	f7fd f803 	bl	80013a8 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d302      	bcc.n	80043b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e04e      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d037      	beq.n	8004436 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b80      	cmp	r3, #128	@ 0x80
 80043ca:	d034      	beq.n	8004436 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b40      	cmp	r3, #64	@ 0x40
 80043d0:	d031      	beq.n	8004436 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d110      	bne.n	8004402 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2208      	movs	r2, #8
 80043e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f838 	bl	800445e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2208      	movs	r2, #8
 80043f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e029      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800440c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004410:	d111      	bne.n	8004436 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800441a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f81e 	bl	800445e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e00f      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4013      	ands	r3, r2
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	429a      	cmp	r2, r3
 8004452:	d0a0      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800445e:	b480      	push	{r7}
 8004460:	b095      	sub	sp, #84	@ 0x54
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004476:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800447a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004484:	643b      	str	r3, [r7, #64]	@ 0x40
 8004486:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800448a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e6      	bne.n	8004466 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3308      	adds	r3, #8
 800449e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e5      	bne.n	8004498 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d118      	bne.n	8004506 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f023 0310 	bic.w	r3, r3, #16
 80044e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6979      	ldr	r1, [r7, #20]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e6      	bne.n	80044d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800451a:	bf00      	nop
 800451c:	3754      	adds	r7, #84	@ 0x54
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004526:	b084      	sub	sp, #16
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	f107 001c 	add.w	r0, r7, #28
 8004534:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fa69 	bl	8004a1c <USB_CoreReset>
 800454a:	4603      	mov	r3, r0
 800454c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800454e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	639a      	str	r2, [r3, #56]	@ 0x38
 8004562:	e005      	b.n	8004570 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004568:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800457c:	b004      	add	sp, #16
 800457e:	4770      	bx	lr

08004580 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f023 0201 	bic.w	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	460b      	mov	r3, r1
 80045ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d115      	bne.n	80045f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045d0:	200a      	movs	r0, #10
 80045d2:	f7fc fef5 	bl	80013c0 <HAL_Delay>
      ms += 10U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	330a      	adds	r3, #10
 80045da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa0f 	bl	8004a00 <USB_GetMode>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d01e      	beq.n	8004626 <USB_SetCurrentMode+0x84>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80045ec:	d9f0      	bls.n	80045d0 <USB_SetCurrentMode+0x2e>
 80045ee:	e01a      	b.n	8004626 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d115      	bne.n	8004622 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004602:	200a      	movs	r0, #10
 8004604:	f7fc fedc 	bl	80013c0 <HAL_Delay>
      ms += 10U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	330a      	adds	r3, #10
 800460c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f9f6 	bl	8004a00 <USB_GetMode>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <USB_SetCurrentMode+0x84>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2bc7      	cmp	r3, #199	@ 0xc7
 800461e:	d9f0      	bls.n	8004602 <USB_SetCurrentMode+0x60>
 8004620:	e001      	b.n	8004626 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e005      	b.n	8004632 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2bc8      	cmp	r3, #200	@ 0xc8
 800462a:	d101      	bne.n	8004630 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800463c:	b084      	sub	sp, #16
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800464a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	e009      	b.n	8004670 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3340      	adds	r3, #64	@ 0x40
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	2200      	movs	r2, #0
 8004668:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	3301      	adds	r3, #1
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b0e      	cmp	r3, #14
 8004674:	d9f2      	bls.n	800465c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004676:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800467a:	2b00      	cmp	r3, #0
 800467c:	d11c      	bne.n	80046b8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800468c:	f043 0302 	orr.w	r3, r3, #2
 8004690:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004696:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e005      	b.n	80046c4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046d0:	2103      	movs	r1, #3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f95a 	bl	800498c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046d8:	2110      	movs	r1, #16
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f8f6 	bl	80048cc <USB_FlushTxFifo>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f920 	bl	8004930 <USB_FlushRxFifo>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004700:	461a      	mov	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800470c:	461a      	mov	r2, r3
 800470e:	2300      	movs	r3, #0
 8004710:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004718:	461a      	mov	r2, r3
 800471a:	2300      	movs	r3, #0
 800471c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	e043      	b.n	80047ac <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800473a:	d118      	bne.n	800476e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800474e:	461a      	mov	r2, r3
 8004750:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	e013      	b.n	8004780 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004764:	461a      	mov	r2, r3
 8004766:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	e008      	b.n	8004780 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800477a:	461a      	mov	r2, r3
 800477c:	2300      	movs	r3, #0
 800477e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478c:	461a      	mov	r2, r3
 800478e:	2300      	movs	r3, #0
 8004790:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479e:	461a      	mov	r2, r3
 80047a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	3301      	adds	r3, #1
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047b0:	461a      	mov	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d3b5      	bcc.n	8004724 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b8:	2300      	movs	r3, #0
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	e043      	b.n	8004846 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047d4:	d118      	bne.n	8004808 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e8:	461a      	mov	r2, r3
 80047ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e013      	b.n	800481a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fe:	461a      	mov	r2, r3
 8004800:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e008      	b.n	800481a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004814:	461a      	mov	r2, r3
 8004816:	2300      	movs	r3, #0
 8004818:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004826:	461a      	mov	r2, r3
 8004828:	2300      	movs	r3, #0
 800482a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004838:	461a      	mov	r2, r3
 800483a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800483e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	3301      	adds	r3, #1
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800484a:	461a      	mov	r2, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4293      	cmp	r3, r2
 8004850:	d3b5      	bcc.n	80047be <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004864:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004872:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	f043 0210 	orr.w	r2, r3, #16
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	4b10      	ldr	r3, [pc, #64]	@ (80048c8 <USB_DevInit+0x28c>)
 8004886:	4313      	orrs	r3, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800488c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f043 0208 	orr.w	r2, r3, #8
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d107      	bne.n	80048b8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048b0:	f043 0304 	orr.w	r3, r3, #4
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048c4:	b004      	add	sp, #16
 80048c6:	4770      	bx	lr
 80048c8:	803c3800 	.word	0x803c3800

080048cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3301      	adds	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048e6:	d901      	bls.n	80048ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e01b      	b.n	8004924 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	daf2      	bge.n	80048da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	019b      	lsls	r3, r3, #6
 80048fc:	f043 0220 	orr.w	r2, r3, #32
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004910:	d901      	bls.n	8004916 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e006      	b.n	8004924 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	d0f0      	beq.n	8004904 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3301      	adds	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004948:	d901      	bls.n	800494e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e018      	b.n	8004980 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	daf2      	bge.n	800493c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2210      	movs	r2, #16
 800495e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800496c:	d901      	bls.n	8004972 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e006      	b.n	8004980 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b10      	cmp	r3, #16
 800497c:	d0f0      	beq.n	8004960 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049ac:	4313      	orrs	r3, r2
 80049ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049be:	b480      	push	{r7}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80049d8:	f023 0303 	bic.w	r3, r3, #3
 80049dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049ec:	f043 0302 	orr.w	r3, r3, #2
 80049f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a34:	d901      	bls.n	8004a3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e01b      	b.n	8004a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	daf2      	bge.n	8004a28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f043 0201 	orr.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3301      	adds	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a5e:	d901      	bls.n	8004a64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e006      	b.n	8004a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d0f0      	beq.n	8004a52 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <memset>:
 8004a7e:	4402      	add	r2, r0
 8004a80:	4603      	mov	r3, r0
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d100      	bne.n	8004a88 <memset+0xa>
 8004a86:	4770      	bx	lr
 8004a88:	f803 1b01 	strb.w	r1, [r3], #1
 8004a8c:	e7f9      	b.n	8004a82 <memset+0x4>
	...

08004a90 <__libc_init_array>:
 8004a90:	b570      	push	{r4, r5, r6, lr}
 8004a92:	4d0d      	ldr	r5, [pc, #52]	@ (8004ac8 <__libc_init_array+0x38>)
 8004a94:	4c0d      	ldr	r4, [pc, #52]	@ (8004acc <__libc_init_array+0x3c>)
 8004a96:	1b64      	subs	r4, r4, r5
 8004a98:	10a4      	asrs	r4, r4, #2
 8004a9a:	2600      	movs	r6, #0
 8004a9c:	42a6      	cmp	r6, r4
 8004a9e:	d109      	bne.n	8004ab4 <__libc_init_array+0x24>
 8004aa0:	4d0b      	ldr	r5, [pc, #44]	@ (8004ad0 <__libc_init_array+0x40>)
 8004aa2:	4c0c      	ldr	r4, [pc, #48]	@ (8004ad4 <__libc_init_array+0x44>)
 8004aa4:	f000 f818 	bl	8004ad8 <_init>
 8004aa8:	1b64      	subs	r4, r4, r5
 8004aaa:	10a4      	asrs	r4, r4, #2
 8004aac:	2600      	movs	r6, #0
 8004aae:	42a6      	cmp	r6, r4
 8004ab0:	d105      	bne.n	8004abe <__libc_init_array+0x2e>
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab8:	4798      	blx	r3
 8004aba:	3601      	adds	r6, #1
 8004abc:	e7ee      	b.n	8004a9c <__libc_init_array+0xc>
 8004abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac2:	4798      	blx	r3
 8004ac4:	3601      	adds	r6, #1
 8004ac6:	e7f2      	b.n	8004aae <__libc_init_array+0x1e>
 8004ac8:	08004b40 	.word	0x08004b40
 8004acc:	08004b40 	.word	0x08004b40
 8004ad0:	08004b40 	.word	0x08004b40
 8004ad4:	08004b44 	.word	0x08004b44

08004ad8 <_init>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	bf00      	nop
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr

08004ae4 <_fini>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	bf00      	nop
 8004ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aea:	bc08      	pop	{r3}
 8004aec:	469e      	mov	lr, r3
 8004aee:	4770      	bx	lr
